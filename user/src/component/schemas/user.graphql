# Importing the Apollo Federation specs for linking services.
extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@key"])

# Type for the createdBy.
type CreatedBy {
  id: ID!
  name: String
  email: String
  role: String
}

# Type for the permission of user.
type Permissions {
  id: ID!
  name: String!
  description: String!
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

# Type for the user role.
type Role {
  id: ID!
  name: String
  description: String
  createdBy: CreatedBy
  createdAt: String
}

# Main User type, which represents the user model in the system.
type User @key(fields: "id") {
  id: ID!
  firstName: String
  lastName: String
  email: String
  gender: String
  role: String
  permissions: [Permissions!]
  # Relationships to other models.
  # categories: [Category!] # Categories created by the user.
  # subCategories: [SubCategory!] # Subcategories created by the user.
  # products: [Product!] # Products created by the user.
  # brands: [Brand!] # Brands created by the user.
  # orders: [Order!] # Orders placed by the user.
  # cartItems: [Cart!] # Items in the user's cart.
  # wishlistItems: [Wishlist!] # Items in the user's wishlist.
  # productReviews: [ProductReview!] # Reviews written by the user.
  # productRequests: [ProductRequest!] # Product requests made by the user.
  # notifications: [Notification!] # Notifications related to the user.
  # media: [Media!] # Media uploaded by the user.
  # coupons: [Coupon!] # Coupons created by the user.
  # faq: [FAQ!] # FAQs created by the user.
  # privacyPolicies: [PrivacyPolicy!] # Privacy policies created by the user.
  # termsAndConditions: [TermAndCondition!] # Terms & conditions created by the user.
  # popupBanners: [PopupBanner!] # Popup banners created by the user.
  # newsLetters: [Newsletter!] # Newsletters created by the user.
  # shippingClass: [ShippingClass!] # Shipping classes created by the user.
  # taxClass: [TaxClass!] # Tax classes created by the user.
  # taxStatus: [TaxStatus!] # Tax statuses created by the user.
}

# Type for validation and general errors
type ErrorResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  errors: [FieldError!] # Array of field-specific errors
}

# Type representing errors for specific fields
type FieldError {
  field: String! # Name of the field that caused the error
  message: String! # Error message associated with the field
}

# Common interface to return status and message.
type BaseResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
}

# Type for the response when fetching a single user.
type UserResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  user: User!
}

# Type for the response when fetching a list of users.
type UsersResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  page: Int!
  limit: Int!
  search: String
  users: [User!]!
}

# Response type when a user logs in.
type UserLoginResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String!
}

# Response type when a user's information is updated.
type UserProfileUpdateResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String!
}

# Response type when fetching the user roles.
type RolesResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  role: [Role!]!
}

# Response type when fetching the single role info.
type RoleResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  role: Role
}

# Input type for a single permission entry
input SinglePermissionInput {
  name: String! # Name of the permission
  canCreate: Boolean # Optional permission to create
  canRead: Boolean # Optional permission to read
  canUpdate: Boolean # Optional permission to update
  canDelete: Boolean # Optional permission to delete
  description: String # Optional description
}

# Input type for updating user permissions
input UpdateUserPermissionInput {
  userId: ID! # The ID of the user whose permissions are being updated
  accessAll: Boolean # Whether the user has access to all permissions
  deniedAll: Boolean # Whether the user has denied to all permissions
  permissions: [SinglePermissionInput!] # Optional array of permission settings
}

# Union types for handling success and error responses.

# Mutation responses can be either a success or an error.
union BaseResponseOrError = BaseResponse | ErrorResponse
union UserLoginResponseOrError = UserLoginResponse | ErrorResponse
union UserProfileUpdateResponseOrError =
    UserProfileUpdateResponse
  | ErrorResponse

# Query response can be either a success or an error.
union GetProfileResponseOrError = BaseResponse | UserResponse
union GetRoleByIDResponseOrError = BaseResponse | RoleResponse | ErrorResponse
union GetUserByIDResponseOrError = UserResponse | ErrorResponse
union GetUsersResponseOrError = UsersResponse | ErrorResponse
union GetRolesResponseOrError = RolesResponse | ErrorResponse
union GetRoleResponseOrError = RoleResponse | ErrorResponse
