# Importing the Apollo Federation specs for linking services.
extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@key"])

# Enum representing Gender options.
enum Gender {
  MALE
  FEMALE
  OTHERS
  RATHER_NOT_SAY
}

# Main User type, which represents the user model in the system.
type User @key(fields: "id") {
  id: ID! # Unique identifier for the user.
  firstName: String! # User's first name.
  lastName: String! # User's last name.
  email: String! # User's email address.
  password: String! # User's password (hashed).
  gender: Gender # User's gender.
  role: Role! # The role associated with the user.
  # Relationships to other models.
  categories: [Category!] # Categories created by the user.
  subCategories: [SubCategory!] # Subcategories created by the user.
  products: [Product!] # Products created by the user.
  brands: [Brand!] # Brands created by the user.
  orders: [Order!] # Orders placed by the user.
  cartItems: [Cart!] # Items in the user's cart.
  wishlistItems: [Wishlist!] # Items in the user's wishlist.
  productReviews: [ProductReview!] # Reviews written by the user.
  productRequests: [ProductRequest!] # Product requests made by the user.
  notifications: [Notification!] # Notifications related to the user.
  media: [Media!] # Media uploaded by the user.
  coupons: [Coupon!] # Coupons created by the user.
  faq: [FAQ!] # FAQs created by the user.
  privacyPolicies: [PrivacyPolicy!] # Privacy policies created by the user.
  termsAndConditions: [TermAndCondition!] # Terms & conditions created by the user.
  popupBanners: [PopupBanner!] # Popup banners created by the user.
  newsLetters: [Newsletter!] # Newsletters created by the user.
  shippingClass: [ShippingClass!] # Shipping classes created by the user.
  taxClass: [TaxClass!] # Tax classes created by the user.
  taxStatus: [TaxStatus!] # Tax statuses created by the user.
  createdAt: String! # Timestamp when the user was created.
  deletedAt: String # Timestamp when the user was deleted (nullable).
}

# Type for the response when fetching a single user.
type UserResponse {
  statusCode: Int!
  success: Boolean!
  user: User!
  message: String!
}

# Type for the response when fetching a list of users.
type UsersResponse {
  statusCode: Int!
  success: Boolean!
  users: [User!]!
  message: String!
}

# Response type when a user registers.
type UserRegisterResponse {
  statusCode: Int!
  success: Boolean!
  token: String!
  message: String!
}

# Response type when a user logs in.
type UserLoginResponse {
  statusCode: Int!
  success: Boolean!
  token: String!
  message: String!
}

# Response type when a user's information is updated.
type UserUpdateResponse {
  statusCode: Int!
  success: Boolean!
  token: Boolean!
  message: String!
}

# Response type when a user is deleted.
type UserDeleteResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
}
