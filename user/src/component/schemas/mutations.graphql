# Mutations to modify user data.
type Mutation {
  # Register a new user.
  # This mutation allows the creation of a new user by providing necessary details like first name, last name, email, password, and optional gender.
  # The response will include a `BaseResponseOrError` containing the success or failure of the operation.
  register(
    firstName: String! # The first name of the user.
    lastName: String! # The last name of the user.
    email: String! # The email address of the user. Must be unique.
    password: String! # The password for the user (hashed on the server).
    gender: String # The gender of the user (optional, default could be null or unspecified).
  ): BaseResponseOrError! # Returns success or error response with status.
  # Log in an existing user.
  # This mutation allows users to log in by providing their email and password.
  # The response will include a `UserLoginResponseOrError` containing an authentication token and user data.
  login(
    email: String! # The email address of the user.
    password: String! # The user's password.
  ): UserLoginResponseOrError! # Returns a token and user data on successful login.
  # Update an existing user's information.
  # This mutation allows modification of an existing user's data such as name, email, or gender.
  # The user must be identified by their unique `id`.
  # The response will contain a `UserProfileUpdateResponse` indicating the success or failure of the operation.
  updateProfile(
    id: ID! # The unique ID of the user to be updated.
    firstName: String # The updated first name of the user (optional).
    lastName: String # The updated last name of the user (optional).
    email: String # The updated email of the user (optional).
    gender: String # The updated gender of the user (optional).
  ): UserProfileUpdateResponseOrError! # Returns updated user info or error message.
  # Change a user's password.
  # This mutation allows a user to change their password by providing their current and new password.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  changePassword(
    oldPassword: String! # The current password of the user.
    newPassword: String! # The new password to replace the old one.
  ): BaseResponseOrError! # Returns success or failure of password change.
  # Request a password reset email.
  # This mutation sends a password reset email to the userâ€™s registered email address if it exists in the system.
  # The response will include a `BaseResponseOrError` indicating success or failure.
  forgetPassword(
    email: String! # The email address of the user requesting password reset.
  ): BaseResponseOrError! # Returns success or failure of password reset request.
  # Reset password using token.
  # This mutation allows a user to reset their password by providing a valid reset token and the new password.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  resetPassword(
    token: String! # The token received in the password reset email.
    newPassword: String! # The new password to set.
  ): BaseResponseOrError! # Returns success or failure of password reset.
  # Update user role by authorized user.
  # This mutation allows authorized users (admins or super admins) to update other users' roles.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  updateUserRole(
    roleId: String! # The ID of the new role to assign.
    userId: String # The unique ID of the user whose role is to be updated.
  ): BaseResponseOrError! # Returns success or failure of the role update.
  # Soft delete a user role by ID.
  # This mutation allows authorized users (admins or super admins) to delete a user role by providing the unique ID.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  deleteUserRole(
    ids: [ID!]! # The unique IDs of the user roles to be soft-deleted.
    skipTrash: Boolean! # If true, permanently deletes instead of soft deleting
  ): BaseResponseOrError! # Returns success or failure of the role deletion.
  # Restore a soft-deleted user role by ID.
  # This mutation allows authorized users (admins or super admins) to restore a soft-deleted user role by providing the unique IDs.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  restoreUserRole(
    ids: [ID!]! # The unique IDs of the user roles to be restored.
  ): BaseResponseOrError! # Returns success or failure of the role restoration.
  # Permanently delete a soft-deleted user role from the trash by ID.
  # This mutation allows authorized users (admins or super admins) to permanently delete a soft-deleted user role by providing the unique IDs.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  deleteUserRoleFromTrash(
    ids: [ID!]! # The unique IDs of the soft-deleted user roles to be permanently deleted.
  ): BaseResponseOrError! # Returns success or failure of the role deletion.
  # Create a new user role.
  # This mutation allows authorized users (admins or super admins) to create new roles for other users.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  createUserRole(
    name: String! # The name of the new user role to be created.
    description: String # The description associated with the role (optional).
  ): BaseResponseOrError! # Returns success or failure of role creation.
  # Update existing user role info.
  # This mutation allows authorized users (admins or super admins) to update existing roles for other users.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  updateUserRoleInfo(
    id: ID! # The unique ID of the user role to be updated.
    name: String! # The name of the new user role.
    description: String # The description associated with the role (optional).
  ): BaseResponseOrError! # Returns success or failure of role update.
  # Update existing user permissions for CRUD operations.
  # This mutation allows authorized users (admins or super admins) to update existing permissions for other users.
  # The response will include a `BaseResponseOrError` indicating success or failure of the operation.
  updateUserPermission(
    input: UpdateUserPermissionInput! # The input data for updating user permissions (such as permissions to create, read, update, delete).
  ): BaseResponseOrError! # Returns success or failure of permission update.
  # User email verification.
  # This mutation allows a user to verify their email using a user ID from the verification link.
  # The response will include a EmailVerificationResponseOrError indicating success or failure of the operation.
  verifyEmail(
    userId: ID! # The unique identifier of the user to verify their email.
  ): EmailVerificationResponseOrError! # Returns success or failure of the operation.
  # User account activation.
  # This mutation allows a user to verify their account using a user ID from the verification link.
  # The response will include a BaseResponseOrError indicating success or failure of the operation.
  accountActivation(
    userId: ID! # The unique identifier of the user to verify their account.
  ): ActiveAccountResponseOrError! # Returns success or failure of the operation.
}
