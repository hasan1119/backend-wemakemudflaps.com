# Mutations to modify user data.
type Mutation {
  # Register a new user.
  # This mutation allows the creation of a new user by providing necessary details like name, email, password, and gender.
  # The response will include a `BaseResponse` containing a token, user data, and status.
  register(
    firstName: String! # The first name of the user.
    lastName: String! # The last name of the user.
    email: String! # The email address of the user.
    password: String! # The password for the user (hashed on the server).
    gender: String # The gender of the user (optional).
  ): BaseResponse!

  # Log in an existing user.
  # This mutation allows users to log in by providing their email and password.
  # The response will include a `UserLoginResponse` containing an authentication token and user data.
  login(
    email: String! # The email address of the user.
    password: String! # The user's password.
  ): UserLoginResponse!

  # Update an existing user's information.
  # This mutation allows modification of an existing user's data such as name, email, or gender.
  # The user must be identified by their unique `id`.
  # The response will contain a `UserUpdateResponse` indicating the success or failure of the operation.
  updateProfile(
    id: ID! # The unique ID of the user to be updated.
    firstName: String # The updated first name of the user (optional).
    lastName: String # The updated last name of the user (optional).
    email: String # The updated email of the user (optional).
    gender: String # The updated gender of the user (optional).
  ): UserProfileUpdateResponse!

  # Change a user's password.
  # This mutation allows a user to change their password by providing their current and new password.
  # The response will include a `BaseResponse` indicating success or failure.
  changePassword(
    oldPassword: String! # The current password of the user.
    newPassword: String! # The new password to replace the old one.
  ): BaseResponse!

  # Request a password reset email.
  # This mutation sends a password reset email to the userâ€™s registered email address if it exists in the system.
  # The response will include a `BaseResponse` indicating success or failure.
  forgetPassword(
    email: String! # The email address of the user requesting password reset.
  ): BaseResponse!

  # Reset password using token.
  # This mutation allows a user to reset their password by providing a valid reset token and the new password.
  # The response will include a `BaseResponse` indicating success or failure.
  resetPassword(
    token: String! # The token received in the password reset email.
    newPassword: String! # The new password to set.
  ): BaseResponse!

  # Update user role by authorized user.
  # This mutation allows authorized users to update other users role.
  # The response will include a `BaseResponse` indicating success or failure.
  updateUserRole(role: String!): BaseResponse!

  # Update user permission across the application
  # This mutation allows authorized users to update other users permission by user id.
  # The response will include a `BaseResponse` indicating success or failure.
  updateUserPermission(id: ID!): BaseResponse!

  # Delete a user role by ID.
  # This mutation allows authorized users to delete a user role by providing the unique ID.
  # The response will include a `BaseResponse` indicating success or failure.
  deleteUserRole(
    id: ID! # The unique ID of the user role to be deleted.
  ): BaseResponse!

  # Create a new user role.
  # This mutation allows authorized users to create new roles for other users.
  # The response will include a `BaseResponse` indicating success or failure.
  createUserRole(
    name: String! # The name of the new user role to be created.
    description: String # The description associated with the role.
  ): BaseResponse!

  # Update existing user role info.
  # This mutation allows authorized users to update existing roles for other users.
  # The response will include a `BaseResponse` indicating success or failure.
  updateUserRoleInfo(
    id: ID! # The unique ID of the user role to be deleted.
    name: String! # The name of the new user role to be created.
    description: String # The description associated with the role.
  ): BaseResponse!
}
