# ---------------------- Apollo Federation Link ----------------------

# Importing Apollo Federation specification directives for composing multiple services into a single graph.
extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@shareable"]
  )

# ---------------------- Basic Types ----------------------

# Enum defining all possible permission targets in the system.
# These correspond to different resources/modules that users can be granted access to.
enum PermissionName {
  USER
  BRAND
  CATEGORY
  PRODUCT
  PERMISSION
  PRODUCT_REVIEW
  SHIPPING_CLASS
  SUB_CATEGORY
  TAX_CLASS
  TAX_STATUS
  FAQ
  NEWS_LETTER
  POP_UP_BANNER
  PRIVACY_POLICY
  TERMS_CONDITIONS
  ORDER
  ROLE
  NOTIFICATION
  MEDIA
  COUPON
}

# Represents an error related to a specific field in input validation or business logic.
type FieldError @shareable {
  field: String! # The specific field that caused the error (e.g., "email", "password").
  message: String! # Descriptive message explaining the reason for the error.
}

# Generic error response type returned when a mutation or query fails.
type ErrorResponse @shareable {
  statusCode: Int! # HTTP-like status code (e.g., 400, 401, 500).
  success: Boolean! # Whether the operation was successful (always false here).
  message: String! # General error message.
  errors: [FieldError!] # Optional list of field-specific errors.
}

# Standard response structure used when only status and message are returned (e.g., success/failure).
type BaseResponse @shareable {
  statusCode: Int!
  success: Boolean!
  message: String!
}

# ---------------------- CreatedBy & Permissions ----------------------

# Minimal user information stored with entities to track who created them.
type CreatedBy @shareable @key(fields: "id") {
  id: ID! # Unique identifier of the creator.
  name: String! # Full name of the creator.
  roles: [String!]! # List of roles the creator holds.
}

# ---------------------- Permission Types ----------------------

# Input for assigning a permission to a role. Used in role management.
input RolePermissionInput {
  name: PermissionName! # Target entity/resource for the permission.
  description: String # Optional explanation of what the permission entails.
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

# Input used for assigning permission details against a role (usually for updates).
input PermissionAgainstRoleInput {
  name: String! # Name of the resource/module.
  description: String # Description of the permission.
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

# Represents a full permission record stored in the database.
type Permissions {
  id: ID!
  name: PermissionName!
  description: String!
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

# Represents a cached permission in the user's session.
type PermissionSession @shareable {
  id: ID!
  name: String!
  description: String
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

# Represents a cached permission in a role's session data (stored in Redis).
type RolePermissionSession {
  id: ID!
  name: String!
  description: String
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

# ---------------------- Role Types ----------------------

# Represents a role in the system with its associated default permissions.
type Role {
  id: ID!
  name: String!
  description: String
  defaultPermissions: [RolePermissionSession!]
  systemDeleteProtection: Boolean # Prevents deletion via UI/API.
  systemUpdateProtection: Boolean # Prevents updates via UI/API.
  systemPermanentDeleteProtection: Boolean # Prevents deletion even by super admin.
  systemPermanentUpdateProtection: Boolean # Prevents update even by super admin.
  assignedUserCount: Int # Number of users currently assigned to this role.
  createdBy: CreatedBy # Metadata on who created the role.
  createdAt: String
  deletedAt: String
}

# Role session cache structure stored by ID or name in Redis.
type RoleSession {
  id: ID!
  name: String!
  description: String!
  defaultPermissions: [RolePermissionSession!]!
  systemDeleteProtection: Boolean!
  systemUpdateProtection: Boolean!
  systemPermanentDeleteProtection: Boolean!
  systemPermanentUpdateProtection: Boolean!
  createdBy: CreatedBy!
  createdAt: String!
  deletedAt: String!
}

# Response returned when fetching a single role.
type RoleResponse {
  statusCode: Int!
  role: Role!
  success: Boolean!
  message: String!
}

# ---------------------- User Types ----------------------

# Enum for user gender selection, used in registration or profile setup.
enum Gender {
  Male
  Female
  Others
  Rather_not_to_say
}

# Represents the authenticated user's session data (lightweight).
type UserSession @shareable {
  id: ID!
  avatar: String!
  firstName: String!
  lastName: String!
  email: String!
  gender: String!
  roles: [String!]!
  emailVerified: Boolean!
  isAccountActivated: Boolean!
}

# Cached user session indexed by email, stored in Redis.
type UserSessionByEmail @shareable {
  id: ID!
  avatar: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  emailVerified: Boolean!
  gender: String!
  roles: [String!]!
  permissions: [PermissionSession!]!
  canUpdatePermissions: Boolean!
  canUpdateRole: Boolean!
  isAccountActivated: Boolean!
  tempUpdatedEmail: String!
  tempEmailVerified: Boolean!
  createdAt: String!
  deletedAt: String!
}

# Cached user session indexed by ID, stored in Redis.
type UserSessionById @shareable {
  id: ID!
  avatar: String!
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean!
  gender: String!
  roles: [String!]!
  permissions: [PermissionSession!]!
  canUpdatePermissions: Boolean!
  canUpdateRole: Boolean!
  isAccountActivated: Boolean!
  tempUpdatedEmail: String!
  tempEmailVerified: Boolean!
  createdAt: String!
  deletedAt: String!
}

# Represents a full user object fetched from the database.
type User @key(fields: "id") {
  id: ID!
  firstName: String
  lastName: String
  email: String
  emailVerified: Boolean
  gender: String
  roles: [String]
  isAccountActivated: Boolean
  permissions: [Permissions!]
  canUpdatePermissions: Boolean
  canUpdateRole: Boolean
  createdAt: String
  deletedAt: String
}

# ---------------------- Responses ----------------------

# Response for single user fetch.
type UserResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  user: User!
}

# Response when fetching multiple users.
type UsersResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  users: [User!]!
  total: Int! # Total users matching the query.
}

# Response when fetching only the permissions assigned to a user.
type PermissionsResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  permissions: [Permissions!]!
}

# Response combining personalized permissions (overrides) and default role-based permissions.
type PersonalizedWithRolePermissionResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  personalizedPermissions: [Permissions!]!
  rolePermissions: [Role!]
}

# Returned after successful login with an access token.
type UserLoginResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String!
}

# Response when user profile is updated, possibly with a new token.
type UserProfileUpdateResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String!
}

# Response when verifying user email, might include new access token.
type EmailVerificationResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String
}

# Response when retrieving list of user roles.
type RolesResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  roles: [Role!]!
  total: Int!
}

# Single role fetch response.
type RoleResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  role: Role
}

# ---------------------- Inputs ----------------------

# Input to define a single permission, typically for mutation to assign to a user.
input SinglePermissionInput {
  name: PermissionName!
  canCreate: Boolean
  canRead: Boolean
  canUpdate: Boolean
  canDelete: Boolean
  description: String
}

# Input to update user's permissions explicitly.
input UpdateUserPermissionInput {
  userId: ID! # Target user ID.
  accessAll: Boolean # Grant access to all permissions.
  deniedAll: Boolean # Deny all permissions explicitly.
  permissions: [SinglePermissionInput!] # Detailed list of permissions to apply.
  password: String # Optional password for authorization (non-super admins).
}

# ---------------------- Unions ----------------------

# Generic union for mutation responses that can succeed or fail.
union BaseResponseOrError = BaseResponse | ErrorResponse

# Union return type for login mutation.
union UserLoginResponseOrError =
    BaseResponse
  | UserLoginResponse
  | ErrorResponse

# Union for user profile update result.
union UserProfileUpdateResponseOrError =
    BaseResponse
  | UserProfileUpdateResponse
  | ErrorResponse

# Union for email verification result.
union EmailVerificationResponseOrError =
    EmailVerificationResponse
  | ErrorResponse

# Union for activating an account.
union ActiveAccountResponseOrError = BaseResponse | ErrorResponse

# Query result when fetching the current profile.
union GetProfileResponseOrError = BaseResponse | ErrorResponse | UserResponse

# Union when fetching role by ID.
union GetRoleByIDResponseOrError = BaseResponse | RoleResponse | ErrorResponse

# Union when fetching user by ID.
union GetUserByIDResponseOrError = BaseResponse | UserResponse | ErrorResponse

# Union for multiple users fetch query.
union GetUsersResponseOrError = BaseResponse | UsersResponse | ErrorResponse

# Union for retrieving multiple roles.
union GetRolesResponseOrError = BaseResponse | RolesResponse | ErrorResponse

# Union when retrieving a single role.
union GetRoleResponseOrError = BaseResponse | RoleResponse | ErrorResponse

# Union for personalized permissions fetch query.
union GetPermissionsResponseOrError =
    BaseResponse
  | PersonalizedWithRolePermissionResponse
  | ErrorResponse

# Union when retrieving only user-specific permissions.
union GetPersonalizedPermissionsResponseOrError =
    BaseResponse
  | PermissionsResponse
  | ErrorResponse
