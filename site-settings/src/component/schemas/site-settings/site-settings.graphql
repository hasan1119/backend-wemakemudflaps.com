# ---------------------- Site Settings Types ----------------------
enum ShopEmailType {
  Corporate
  Complain
  Support
  Other
}

enum WeeklyOffDayEnum {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

type ShopEmail {
  type: ShopEmailType!
  email: String!
}

enum ShopPhoneType {
  Mobile
  Landline
  Fax
  Other
}

type ShopPhone {
  type: ShopPhoneType!
  number: String!
}

type WeeklyOffDay {
  day: WeeklyOffDayEnum!
}

type OpeningAndClosingHours {
  opening: String
  closing: String
}

type ShopAddress @key(fields: "id") @shareable {
  id: ID!
  brunchName: String
  addressLine1: String
  addressLine2: String
  emails: [ShopEmail]
  phones: [ShopPhone]
  city: String
  state: String
  country: String
  zipCode: String
  direction: String
  isActive: Boolean
  openingAndClosingHours: OpeningAndClosingHours
  isEveryDayOpen: Boolean
  weeklyOffDays: [WeeklyOffDay]
}

type MetaData {
  title: String
  description: String
  keywords: [String]
}

type SiteSettings {
  id: ID!
  name: String
  metaData: MetaData
  favIcon: Media
  logo: Media
  contactNumber: String
  contactEmail: String
  privacyPolicy: String
  termsAndConditions: String
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

# ---------------------- Input Types ----------------------
input ShopEmailInput {
  type: ShopEmailType!
  email: String!
}

input ShopPhoneInput {
  type: ShopPhoneType!
  number: String!
}

input WeeklyOffDayInput {
  day: WeeklyOffDayEnum!
}

input OpeningAndClosingHoursInput {
  opening: String
  closing: String
}

input ShopAddressInput {
  id: ID
  brunchName: String
  addressLine1: String
  addressLine2: String
  emails: [ShopEmailInput]
  phones: [ShopPhoneInput]
  city: String
  state: String
  country: String
  zipCode: String
  direction: String
  openingAndClosingHours: OpeningAndClosingHoursInput
  isActive: Boolean
  isEveryDayOpen: Boolean
  weeklyOffDays: [WeeklyOffDayInput]
}

input MetaDataInput {
  title: String
  description: String
  keywords: [String]
}

# Response for fetching a site settings.
type SiteSettingsResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  siteSettings: SiteSettings!
}

type ShopAddressResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  shopAddress: ShopAddress!
}

type ShopAddressesResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  shopAddresses: [ShopAddress!]!
  total: Int!
}

# ---------------------- Unions ----------------------
union CreateOrUpdateShopAddressResponseOrError =
    BaseResponse
  | ShopAddressResponse
  | ErrorResponse
union GetShopAddressesResponseOrError =
    BaseResponse
  | ShopAddressesResponse
  | ErrorResponse
union CreateOrUpdateSiteSettingsResponseOrError =
    BaseResponse
  | SiteSettingsResponse
  | ErrorResponse
union GetSiteSettingsResponseOrError =
    BaseResponse
  | SiteSettingsResponse
  | ErrorResponse
