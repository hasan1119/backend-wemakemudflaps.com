schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

union ActiveAccountResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

type AddressBook
  @join__type(graph: USER)
{
  id: ID!
  company: String!
  streetOne: String!
  streetTwo: String!
  city: String!
  state: String!
  zip: String!
  country: String
  type: AddressType!
  isDefault: Boolean!
  createdAt: String
  updatedAt: String
}

type AddressesBookResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  addressBook: [AddressBook!]!
}

type AddressResponseBook
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  addressBook: AddressBook!
}

enum AddressType
  @join__type(graph: USER)
{
  SHIPPING @join__enumValue(graph: USER)
  BILLING @join__enumValue(graph: USER)
}

enum AllowBackOrders
  @join__type(graph: PRODUCT)
{
  DONT_ALLOW @join__enumValue(graph: PRODUCT)
  ALLOW_BUT_NOTIFY_CUSTOMER @join__enumValue(graph: PRODUCT)
  ALLOW @join__enumValue(graph: PRODUCT)
}

type BaseResponse
  @join__type(graph: MEDIA)
  @join__type(graph: PRODUCT)
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
}

union BaseResponseOrError
  @join__type(graph: MEDIA)
  @join__type(graph: USER)
  @join__unionMember(graph: MEDIA, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: MEDIA, member: "ErrorResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

type Brand
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  slug: String!
  thumbnail: Media
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type BrandPaginationDataSession
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  slug: String!
  thumbnail: Media
  totalProducts: Int!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type BrandPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  brands: [BrandPaginationDataSession!]!
  total: Int!
}

type BrandResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  brand: Brand!
}

type BrandResponseById
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  brand: Brand!
}

enum CalculateTaxBasedOn
  @join__type(graph: PRODUCT)
{
  SHIPPING_ADDRESS @join__enumValue(graph: PRODUCT)
  BILLING_ADDRESS @join__enumValue(graph: PRODUCT)
  STORE_ADDRESS @join__enumValue(graph: PRODUCT)
}

type Category
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  slug: String!
  description: String
  thumbnail: Media
  position: Int!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
  subCategories: [Category!]!
  parentCategory: Category
}

type CategoryPaginationDataSession
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  slug: String!
  description: String
  thumbnail: Media
  position: Int!
  totalProducts: Int
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
  subCategories: [Category!]!
  parentCategory: Category
}

type CategoryPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  categories: [CategoryPaginationDataSession!]!
  total: Int!
}

type CategoryResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  category: Category!
}

type CategoryResponseById
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  category: Category!
}

union CreateAddressBookResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "AddressResponseBook")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | AddressResponseBook | ErrorResponse

union CreateBrandResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "BrandResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | BrandResponse | ErrorResponse

union CreateCategoryResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "CategoryResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | CategoryResponse | ErrorResponse

type CreatedBy
  @join__type(graph: MEDIA, key: "id", extension: true)
  @join__type(graph: PRODUCT, key: "id", extension: true)
  @join__type(graph: USER, key: "id")
{
  id: ID!
  name: String! @join__field(graph: USER)
  roles: [UserRoleObject!]! @join__field(graph: USER)
}

union CreateProductAttributeResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductAttributeResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductAttributeResponse | ErrorResponse

union CreateProductResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union CreateProductReviewResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductReviewResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductReviewResponse | ErrorResponse

union CreateRoleResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "RoleResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | RoleResponse | ErrorResponse

union CreateShippingClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingClassResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingClassResponse | ErrorResponse

union CreateShippingMethodResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingMethodResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingMethodResponse | ErrorResponse

union CreateShippingZoneResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingZoneResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingZoneResponse | ErrorResponse

union CreateTagResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TagResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TagResponse | ErrorResponse

union CreateTaxClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxClassResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxClassResponse | ErrorResponse

union CreateTaxExemptionResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "TaxExemptionResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | TaxExemptionResponse | ErrorResponse

union CreateTaxOptionsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxOptionsResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxOptionsResponse | ErrorResponse

union CreateTaxRateResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxRateResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxRateResponse | ErrorResponse

enum DefaultWarrantyPeriod
  @join__type(graph: PRODUCT)
{
  DAY @join__enumValue(graph: PRODUCT)
  DAYS @join__enumValue(graph: PRODUCT)
  WEEK @join__enumValue(graph: PRODUCT)
  WEEKS @join__enumValue(graph: PRODUCT)
  MONTH @join__enumValue(graph: PRODUCT)
  MONTHS @join__enumValue(graph: PRODUCT)
  YEAR @join__enumValue(graph: PRODUCT)
  YEARS @join__enumValue(graph: PRODUCT)
  LIFETIME @join__enumValue(graph: PRODUCT)
}

union DeleteAddressesBookResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "DeleteAddressResponseBook")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | DeleteAddressResponseBook | ErrorResponse

type DeleteAddressResponseBook
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  newDefaultAddressId: String
}

union DeleteBrandResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteCategoryResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteProductAttributeResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteProductResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteProductReviewResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteShippingClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteShippingMethodResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteShippingZoneResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteTagResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteTaxClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union DeleteTaxRateResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

enum DimensionUnit
  @join__type(graph: PRODUCT)
{
  MILLIMETER @join__enumValue(graph: PRODUCT)
  CENTIMETER @join__enumValue(graph: PRODUCT)
  METER @join__enumValue(graph: PRODUCT)
  KILOMETER @join__enumValue(graph: PRODUCT)
  INCH @join__enumValue(graph: PRODUCT)
  FOOT @join__enumValue(graph: PRODUCT)
  YARD @join__enumValue(graph: PRODUCT)
}

enum discountType
  @join__type(graph: PRODUCT)
{
  PERCENTAGE_DISCOUNT @join__enumValue(graph: PRODUCT)
  FIXED_CART_DISCOUNT @join__enumValue(graph: PRODUCT)
  FIXED_PRODUCT_DISCOUNT @join__enumValue(graph: PRODUCT)
}

enum DisplayTaxTotals
  @join__type(graph: PRODUCT)
{
  AS_A_SINGLE_ITEM @join__enumValue(graph: PRODUCT)
  ITEMIZED @join__enumValue(graph: PRODUCT)
}

type EmailVerificationResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String
}

union EmailVerificationResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "EmailVerificationResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | EmailVerificationResponse | ErrorResponse

type ErrorResponse
  @join__type(graph: MEDIA)
  @join__type(graph: PRODUCT)
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  errors: [FieldError!]
}

type FieldError
  @join__type(graph: MEDIA)
  @join__type(graph: PRODUCT)
  @join__type(graph: USER)
{
  field: String!
  message: String!
}

type FlatRate
  @join__type(graph: PRODUCT)
{
  id: ID!
  title: String!
  taxStatus: Boolean!
  cost: Float!
  costs: [FlatRateCost!]!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type FlatRateCost
  @join__type(graph: PRODUCT)
{
  id: ID!
  cost: Float!
  shippingClass: ShippingClass!
}

input FlatRateCostInput
  @join__type(graph: PRODUCT)
{
  id: ID
  cost: Float!
  shippingClassId: ID!
}

input FlatRateInput
  @join__type(graph: PRODUCT)
{
  id: ID
  title: String!
  taxStatus: Boolean!
  cost: Float!
  costs: [FlatRateCostInput!]!
}

type FreeShipping
  @join__type(graph: PRODUCT)
{
  id: ID!
  title: String!
  conditions: String!
  minimumOrderAmount: Float
  applyMinimumOrderRuleBeforeCoupon: Boolean!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

enum FreeShippingCondition
  @join__type(graph: PRODUCT)
{
  NA @join__enumValue(graph: PRODUCT)
  Coupon @join__enumValue(graph: PRODUCT)
  Minimum_Order_Amount @join__enumValue(graph: PRODUCT)
  Minimum_Order_Amount_or_Coupon @join__enumValue(graph: PRODUCT)
  Minimum_Order_Amount_and_Coupon @join__enumValue(graph: PRODUCT)
}

input FreeShippingInput
  @join__type(graph: PRODUCT)
{
  id: ID
  title: String!
  conditions: FreeShippingCondition!
  minimumOrderAmount: Float
  applyMinimumOrderRuleBeforeCoupon: Boolean!
}

enum Gender
  @join__type(graph: USER)
{
  Male @join__enumValue(graph: USER)
  Female @join__enumValue(graph: USER)
  Others @join__enumValue(graph: USER)
  Rather_not_to_say @join__enumValue(graph: USER)
}

union GetAddressBookByIdResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "AddressResponseBook")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | AddressResponseBook | ErrorResponse

union GetAddressesBookResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "AddressesBookResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | AddressesBookResponse | ErrorResponse

union GetAllProductAttributesResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductAttributePaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductAttributePaginationResponse | ErrorResponse

union GetBrandByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "BrandResponseById")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | BrandResponseById | ErrorResponse

union GetBrandsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "BrandPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | BrandPaginationResponse | ErrorResponse

union GetCategoriesResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "CategoryPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | CategoryPaginationResponse | ErrorResponse

union GetCategoryByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "CategoryResponseById")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | CategoryResponseById | ErrorResponse

union GetMediaByIdResponseOrError
  @join__type(graph: MEDIA)
  @join__unionMember(graph: MEDIA, member: "BaseResponse")
  @join__unionMember(graph: MEDIA, member: "MediaResponse")
  @join__unionMember(graph: MEDIA, member: "ErrorResponse")
 = BaseResponse | MediaResponse | ErrorResponse

union GetMediasResponseOrError
  @join__type(graph: MEDIA)
  @join__unionMember(graph: MEDIA, member: "BaseResponse")
  @join__unionMember(graph: MEDIA, member: "MediasResponse")
  @join__unionMember(graph: MEDIA, member: "ErrorResponse")
 = BaseResponse | MediasResponse | ErrorResponse

union GetPermissionsResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "PersonalizedWithRolePermissionResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | PersonalizedWithRolePermissionResponse | ErrorResponse

union GetPersonalizedPermissionsResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "PermissionsResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | PermissionsResponse | ErrorResponse

union GetProductAttributeByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductAttributeResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductAttributeResponse | ErrorResponse

union GetProductByIdResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductResponse | ErrorResponse

union GetProductReviewByIdResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductReviewResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductReviewResponse | ErrorResponse

union GetProductReviewsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductReviewPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductReviewPaginationResponse | ErrorResponse

union GetProductsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductPaginationResponse | ErrorResponse

union GetProfileResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
  @join__unionMember(graph: USER, member: "UserResponse")
 = BaseResponse | ErrorResponse | UserResponse

union GetRoleByIDResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "RoleResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | RoleResponse | ErrorResponse

union GetRoleResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "RoleResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | RoleResponse | ErrorResponse

union GetRolesResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "RolesResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | RolesResponse | ErrorResponse

union GetShippingClassByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingClassResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingClassResponse | ErrorResponse

union GetShippingClassesResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingClassPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingClassPaginationResponse | ErrorResponse

union GetShippingMethodByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingMethodResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingMethodResponse | ErrorResponse

union GetShippingMethodsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingMethodPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingMethodPaginationResponse | ErrorResponse

union GetShippingZoneByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingZoneResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingZoneResponse | ErrorResponse

union GetShippingZonesResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingZonePaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingZonePaginationResponse | ErrorResponse

union GetTagByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TagResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TagResponse | ErrorResponse

union GetTagsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TagPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TagPaginationResponse | ErrorResponse

union GetTaxClassByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxClassResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxClassResponse | ErrorResponse

union GetTaxClassesResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxClassPaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxClassPaginationResponse | ErrorResponse

union GetTaxExemptionsResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "TaxExemptionResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | TaxExemptionResponse | ErrorResponse

union GetTaxOptionsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxOptionsResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxOptionsResponse | ErrorResponse

union GetTaxRateByIDResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxRateResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxRateResponse | ErrorResponse

union GetTaxRatesResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxRatePaginationResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxRatePaginationResponse | ErrorResponse

union GetUserByIDResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "UserResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | UserResponse | ErrorResponse

union GetUserLoginInfoResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "UserLoginInfoResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | UserLoginInfoResponse | ErrorResponse

union GetUsersResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "UsersResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | UsersResponse | ErrorResponse

scalar join__DirectiveArguments

scalar join__FieldSet

enum join__Graph {
  MEDIA @join__graph(name: "media", url: "http://localhost:4002")
  PRODUCT @join__graph(name: "product", url: "http://localhost:4003")
  USER @join__graph(name: "user", url: "http://localhost:4001")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LocalPickUp
  @join__type(graph: PRODUCT)
{
  id: ID!
  title: String!
  taxStatus: Boolean!
  cost: Float!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

input LocalPickUpInput
  @join__type(graph: PRODUCT)
{
  id: ID
  title: String!
  taxStatus: Boolean!
  cost: Float!
}

type LoginMeta
  @join__type(graph: USER)
{
  id: ID!
  ip: String
  city: String
  isp: String
  country: String
  countryIso: String
  postalCode: String
  subdivisionIso: String
  timeZone: String
  cityGeonameId: Int
  countryGeonameId: Int
  subdivisionGeonameId: Int
  ispId: Int
  latitude: Float
  longitude: Float
  fingerprint: String!
  session: String!
  fraud: Float!
  tor: Boolean!
  createdAt: String
}

input LoginMetaInput
  @join__type(graph: USER)
{
  ip: String
  city: String
  isp: String
  country: String
  countryIso: String
  postalCode: String
  subdivisionIso: String
  timeZone: String
  cityGeonameId: Int
  countryGeonameId: Int
  subdivisionGeonameId: Int
  ispId: Int
  latitude: Float
  longitude: Float
  fingerprint: String!
  session: String!
  fraud: Float!
  tor: Boolean!
}

type Media
  @join__type(graph: MEDIA, key: "id")
  @join__type(graph: PRODUCT, key: "id", extension: true)
  @join__type(graph: USER, key: "id", extension: true)
{
  id: ID!
  mediaType: String @join__field(graph: MEDIA)
  url: String @join__field(graph: MEDIA)
  fileName: String @join__field(graph: MEDIA)
  title: String @join__field(graph: MEDIA)
  description: String @join__field(graph: MEDIA)
  altText: String @join__field(graph: MEDIA)
  dimension: MediaDimension @join__field(graph: MEDIA)
  length: Int @join__field(graph: MEDIA)
  category: String @join__field(graph: MEDIA)
  size: Int @join__field(graph: MEDIA)
  bucketName: String @join__field(graph: MEDIA)
  createdBy: CreatedBy @join__field(graph: MEDIA)
  createdAt: String @join__field(graph: MEDIA)
  deletedAt: String @join__field(graph: MEDIA)
}

enum MediaCategory
  @join__type(graph: MEDIA)
{
  Avatar @join__enumValue(graph: MEDIA)
  Product @join__enumValue(graph: MEDIA)
  Product_Review @join__enumValue(graph: MEDIA)
  Product_Return @join__enumValue(graph: MEDIA)
  Order @join__enumValue(graph: MEDIA)
  Complain @join__enumValue(graph: MEDIA)
  Banner @join__enumValue(graph: MEDIA)
  Site_Logo @join__enumValue(graph: MEDIA)
  Site_Favicon @join__enumValue(graph: MEDIA)
  Carousel @join__enumValue(graph: MEDIA)
  Category @join__enumValue(graph: MEDIA)
  Sub_Category @join__enumValue(graph: MEDIA)
  Brand @join__enumValue(graph: MEDIA)
  Promotion @join__enumValue(graph: MEDIA)
  Invoice @join__enumValue(graph: MEDIA)
  Shipping_Label @join__enumValue(graph: MEDIA)
  Site_Settings @join__enumValue(graph: MEDIA)
  Tax_Exemption_Certificate @join__enumValue(graph: MEDIA)
}

type MediaDimension
  @join__type(graph: MEDIA)
{
  width: Int!
  height: Int!
  unit: String!
}

input MediaDimensionInput
  @join__type(graph: MEDIA)
{
  width: Int!
  height: Int!
  unit: String!
}

enum MediaMimeType
  @join__type(graph: MEDIA)
{
  image_jpeg @join__enumValue(graph: MEDIA)
  image_png @join__enumValue(graph: MEDIA)
  image_gif @join__enumValue(graph: MEDIA)
  image_bmp @join__enumValue(graph: MEDIA)
  image_webp @join__enumValue(graph: MEDIA)
  image_svg_xml @join__enumValue(graph: MEDIA)
  image_tiff @join__enumValue(graph: MEDIA)
  image_x_icon @join__enumValue(graph: MEDIA)
  image_heic @join__enumValue(graph: MEDIA)
  image_heif @join__enumValue(graph: MEDIA)
  image_jp2 @join__enumValue(graph: MEDIA)
  image_jpx @join__enumValue(graph: MEDIA)
  image_jpm @join__enumValue(graph: MEDIA)
  image_avif @join__enumValue(graph: MEDIA)
  image_x_portable_anymap @join__enumValue(graph: MEDIA)
  image_x_portable_bitmap @join__enumValue(graph: MEDIA)
  image_x_portable_graymap @join__enumValue(graph: MEDIA)
  image_x_portable_pixmap @join__enumValue(graph: MEDIA)
  image_x_rgb @join__enumValue(graph: MEDIA)
  image_x_xbitmap @join__enumValue(graph: MEDIA)
  image_x_xpixmap @join__enumValue(graph: MEDIA)
  image_x_xwindowdump @join__enumValue(graph: MEDIA)
  video_mp4 @join__enumValue(graph: MEDIA)
  video_mpeg @join__enumValue(graph: MEDIA)
  video_ogg @join__enumValue(graph: MEDIA)
  video_webm @join__enumValue(graph: MEDIA)
  video_x_msvideo @join__enumValue(graph: MEDIA)
  video_x_flv @join__enumValue(graph: MEDIA)
  video_x_m4v @join__enumValue(graph: MEDIA)
  video_x_ms_wmv @join__enumValue(graph: MEDIA)
  video_x_ms_asf @join__enumValue(graph: MEDIA)
  video_x_matroska @join__enumValue(graph: MEDIA)
  video_quicktime @join__enumValue(graph: MEDIA)
  video_3gpp @join__enumValue(graph: MEDIA)
  video_3gpp2 @join__enumValue(graph: MEDIA)
  video_h261 @join__enumValue(graph: MEDIA)
  video_h263 @join__enumValue(graph: MEDIA)
  video_h264 @join__enumValue(graph: MEDIA)
  video_jpeg @join__enumValue(graph: MEDIA)
  video_jpm @join__enumValue(graph: MEDIA)
  video_mj2 @join__enumValue(graph: MEDIA)
  video_mp2t @join__enumValue(graph: MEDIA)
  video_x_f4v @join__enumValue(graph: MEDIA)
  video_x_fli @join__enumValue(graph: MEDIA)
  video_x_mng @join__enumValue(graph: MEDIA)
  video_x_smv @join__enumValue(graph: MEDIA)
  application_pdf @join__enumValue(graph: MEDIA)
  application_msword @join__enumValue(graph: MEDIA)
  application_vnd_ms_excel @join__enumValue(graph: MEDIA)
  application_vnd_ms_powerpoint @join__enumValue(graph: MEDIA)
  application_vnd_openxmlformats_officedocument_wordprocessingml_document @join__enumValue(graph: MEDIA)
  application_vnd_openxmlformats_officedocument_spreadsheetml_sheet @join__enumValue(graph: MEDIA)
  application_vnd_openxmlformats_officedocument_presentationml_presentation @join__enumValue(graph: MEDIA)
  application_vnd_oasis_opendocument_text @join__enumValue(graph: MEDIA)
  application_vnd_oasis_opendocument_spreadsheet @join__enumValue(graph: MEDIA)
  application_vnd_oasis_opendocument_presentation @join__enumValue(graph: MEDIA)
  application_vnd_oasis_opendocument_graphics @join__enumValue(graph: MEDIA)
  application_vnd_oasis_opendocument_chart @join__enumValue(graph: MEDIA)
  application_vnd_oasis_opendocument_formula @join__enumValue(graph: MEDIA)
  application_vnd_oasis_opendocument_image @join__enumValue(graph: MEDIA)
  application_rtf @join__enumValue(graph: MEDIA)
  application_x_abiword @join__enumValue(graph: MEDIA)
  application_vnd_lotus_1_2_3 @join__enumValue(graph: MEDIA)
  application_vnd_lotus_approach @join__enumValue(graph: MEDIA)
  application_vnd_lotus_freelance @join__enumValue(graph: MEDIA)
  application_vnd_lotus_organizer @join__enumValue(graph: MEDIA)
  application_vnd_lotus_screencam @join__enumValue(graph: MEDIA)
  application_vnd_lotus_wordpro @join__enumValue(graph: MEDIA)
  application_vnd_visio @join__enumValue(graph: MEDIA)
}

type MediaResponse
  @join__type(graph: MEDIA)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  media: Media!
}

type MediasResponse
  @join__type(graph: MEDIA)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  medias: [Media!]!
  total: Int!
}

type Mutation
  @join__type(graph: MEDIA)
  @join__type(graph: PRODUCT)
  @join__type(graph: USER)
{
  uploadMediaFiles(inputs: [UploadMediaInput]!): UploadMediaResponseOrError! @join__field(graph: MEDIA)
  updateMediaFileInfo(inputs: UpdateMediaInput!): UpdateMediaResponseOrError! @join__field(graph: MEDIA)
  deleteMediaFiles(ids: [ID!]!, skipTrash: Boolean!, password: String): BaseResponseOrError! @join__field(graph: MEDIA)
  restoreMediaFiles(ids: [ID!]!): BaseResponseOrError! @join__field(graph: MEDIA)
  createBrand(thumbnail: String, name: String!, slug: String!): CreateBrandResponseOrError! @join__field(graph: PRODUCT)
  updateBrand(id: ID!, thumbnail: String, name: String, slug: String): UpdateBrandResponseOrError! @join__field(graph: PRODUCT)
  deleteBrand(ids: [ID]!, skipTrash: Boolean!): DeleteBrandResponseOrError! @join__field(graph: PRODUCT)
  restoreBrands(ids: [ID!]!): RestoreBrandResponseOrError! @join__field(graph: PRODUCT)
  createTag(name: String!, slug: String!): CreateTagResponseOrError! @join__field(graph: PRODUCT)
  updateTag(id: ID!, name: String, slug: String): UpdateTagResponseOrError! @join__field(graph: PRODUCT)
  deleteTag(ids: [ID]!, skipTrash: Boolean!): DeleteTagResponseOrError! @join__field(graph: PRODUCT)
  restoreTags(ids: [ID!]!): RestoreTagResponseOrError! @join__field(graph: PRODUCT)
  createCategory(thumbnail: String, name: String!, slug: String!, description: String, parentCategoryId: ID): CreateCategoryResponseOrError! @join__field(graph: PRODUCT)
  updateCategory(id: ID!, thumbnail: String, slug: String, name: String, description: String): UpdateCategoryResponseOrError! @join__field(graph: PRODUCT)
  updateCategoryPosition(id: ID!, position: Int!): UpdateCategoryResponseOrError! @join__field(graph: PRODUCT)
  deleteCategory(ids: [ID!]!, skipTrash: Boolean): DeleteCategoryResponseOrError @join__field(graph: PRODUCT)
  restoreCategory(ids: [ID!]!): RestoreCategoryResponseOrError @join__field(graph: PRODUCT)
  createShippingClass(value: String!, description: String): CreateShippingClassResponseOrError! @join__field(graph: PRODUCT)
  updateShippingClass(id: ID!, value: String, description: String): UpdateShippingClassResponseOrError! @join__field(graph: PRODUCT)
  deleteShippingClass(ids: [ID]!, skipTrash: Boolean!): DeleteShippingClassResponseOrError! @join__field(graph: PRODUCT)
  restoreShippingClasses(ids: [ID!]!): RestoreShippingClassResponseOrError! @join__field(graph: PRODUCT)
  createTaxClass(value: String!, description: String): CreateTaxClassResponseOrError! @join__field(graph: PRODUCT)
  updateTaxClass(id: ID!, value: String, description: String): UpdateTaxClassResponseOrError! @join__field(graph: PRODUCT)
  deleteTaxClass(ids: [ID]!, skipTrash: Boolean!): DeleteTaxClassResponseOrError! @join__field(graph: PRODUCT)
  restoreTaxClasses(ids: [ID!]!): RestoreTaxClassResponseOrError! @join__field(graph: PRODUCT)
  createTaxRate(country: String!, state: String, city: String, postcode: String, rate: Float!, label: String!, appliesToShipping: Boolean, isCompound: Boolean, priority: Int, taxClassId: ID!): CreateTaxRateResponseOrError! @join__field(graph: PRODUCT)
  updateTaxRate(id: ID!, country: String, state: String, city: String, postcode: String, rate: Float, label: String, appliesToShipping: Boolean, isCompound: Boolean, priority: Int, taxClassId: ID!): UpdateTaxRateResponseOrError! @join__field(graph: PRODUCT)
  deleteTaxRate(ids: [ID]!, skipTrash: Boolean!): DeleteTaxRateResponseOrError! @join__field(graph: PRODUCT)
  restoreTaxRates(ids: [ID!]!): RestoreTaxRateResponseOrError! @join__field(graph: PRODUCT)
  createSystemProductAttribute(name: String!, slug: String!, values: [ProductAttributeValueInput!]!): ProductAttributeResponse! @join__field(graph: PRODUCT)
  createProductAttribute(name: String!, slug: String!, values: [ProductAttributeValueInput!]!): ProductAttributeResponse! @join__field(graph: PRODUCT)
  updateProductAttribute(id: ID!, name: String, slug: String, values: [ProductAttributeValueInput!]!): ProductAttributeResponse! @join__field(graph: PRODUCT)
  deleteProductAttribute(ids: [ID!]!): BaseResponse! @join__field(graph: PRODUCT)
  createReview: String @join__field(graph: PRODUCT)
  createProduct(productConfigurationType: productConfigurationType, productDeliveryType: [ProductDeliveryType!], isCustomized: Boolean, name: String!, slug: String!, defaultImage: ID, images: [ID!], videos: [ID!], brandIds: [ID!], tagIds: [ID!], defaultMainDescription: String, defaultShortDescription: String, categoryIds: [ID!], warrantyDigit: Int, defaultWarrantyPeriod: DefaultWarrantyPeriod, warrantyPolicy: String, regularPrice: Float, salePrice: Float, salePriceStartAt: String, salePriceEndAt: String, tierPricingInfo: ProductPriceInput, saleQuantity: Int, saleQuantityUnit: String, taxStatus: TaxStatus, taxClassId: ID, minQuantity: Int, defaultQuantity: Int, maxQuantity: Int, quantityStep: Int, sku: String, model: String, manageStock: Boolean, stockQuantity: Int, allowBackOrders: AllowBackOrders, lowStockThresHold: Int, stockStatus: StockStatus, soldIndividually: Boolean, initialNumberInStock: String, weightUnit: WeightUnit, weight: Float, dimensionUnit: DimensionUnit, length: Float, width: Float, height: Float, shippingClassId: ID, upsellIds: [ID!], crossSellIds: [ID!], attributeIds: [ID!], variations: [ProductVariationInput!], purchaseNote: String, enableReviews: Boolean, customBadge: String, isVisible: Boolean): CreateProductResponseOrError! @join__field(graph: PRODUCT)
  updateProduct(id: ID!, productConfigurationType: productConfigurationType, productDeliveryType: [ProductDeliveryType!], isCustomized: Boolean, name: String, slug: String, defaultImage: ID, images: [ID!], videos: [ID!], brandIds: [ID!], tagIds: [ID!], defaultMainDescription: String, defaultShortDescription: String, categoryIds: [ID!], warrantyDigit: Int, defaultWarrantyPeriod: DefaultWarrantyPeriod, warrantyPolicy: String, regularPrice: Float, salePrice: Float, salePriceStartAt: String, salePriceEndAt: String, tierPricingInfo: ProductPriceInput, saleQuantity: Int, saleQuantityUnit: String, taxStatus: TaxStatus, taxClassId: ID, minQuantity: Int, defaultQuantity: Int, maxQuantity: Int, quantityStep: Int, sku: String, model: String, manageStock: Boolean, stockQuantity: Int, allowBackOrders: AllowBackOrders, lowStockThresHold: Int, stockStatus: StockStatus, soldIndividually: Boolean, initialNumberInStock: String, weightUnit: WeightUnit, weight: Float, dimensionUnit: DimensionUnit, length: Float, width: Float, height: Float, shippingClassId: ID, upsellIds: [ID!], crossSellIds: [ID!], attributeIds: [ID!], variations: [ProductVariationInput!], purchaseNote: String, enableReviews: Boolean, customBadge: String, isVisible: Boolean): UpdateProductResponseOrError! @join__field(graph: PRODUCT)
  deleteProduct(ids: [ID]!, skipTrash: Boolean!): DeleteProductResponseOrError! @join__field(graph: PRODUCT)
  restoreProducts(ids: [ID!]!): RestoreProductResponseOrError! @join__field(graph: PRODUCT)
  createShippingZone(name: String!, regions: [String!]!, zipCodes: [String]): CreateShippingZoneResponseOrError! @join__field(graph: PRODUCT)
  updateShippingZone(id: ID!, name: String, regions: [String!], zipCodes: [String!]): UpdateShippingZoneResponseOrError! @join__field(graph: PRODUCT)
  deleteShippingZone(id: ID!): DeleteShippingZoneResponseOrError! @join__field(graph: PRODUCT)
  createShippingMethod(title: String!, status: Boolean, description: String, flatRate: FlatRateInput, freeShipping: FreeShippingInput, localPickUp: LocalPickUpInput, ups: UpsInput, shippingZoneId: ID!): CreateShippingMethodResponseOrError! @join__field(graph: PRODUCT)
  updateShippingMethod(id: ID!, title: String, status: Boolean, description: String, flatRate: FlatRateInput, freeShipping: FreeShippingInput, localPickUp: LocalPickUpInput, ups: UpsInput, shippingZoneId: ID!): UpdateShippingMethodResponseOrError! @join__field(graph: PRODUCT)
  deleteShippingMethod(id: ID!): DeleteShippingMethodResponseOrError! @join__field(graph: PRODUCT)
  createTaxOptions(pricesEnteredWithTax: Boolean!, calculateTaxBasedOn: CalculateTaxBasedOn!, shippingTaxClassId: ID, displayPricesInShop: Boolean!, displayPricesDuringCartAndCheckout: Boolean!, priceDisplaySuffix: String!, displayTaxTotals: DisplayTaxTotals!, roundTaxAtSubtotalLevel: Boolean!): CreateTaxOptionsResponseOrError! @join__field(graph: PRODUCT)
  updateTaxOptions(pricesEnteredWithTax: Boolean, calculateTaxBasedOn: CalculateTaxBasedOn, shippingTaxClassId: ID, displayPricesInShop: Boolean, displayPricesDuringCartAndCheckout: Boolean!, priceDisplaySuffix: String, displayTaxTotals: DisplayTaxTotals, roundTaxAtSubtotalLevel: Boolean): UpdateTaxOptionsResponseOrError! @join__field(graph: PRODUCT)
  register(firstName: String!, lastName: String!, email: String!, username: String!, password: String!, gender: Gender, company: String): BaseResponseOrError! @join__field(graph: USER)
  login(email: String!, password: String!, meta: LoginMetaInput!): UserLoginResponseOrError! @join__field(graph: USER)
  updateProfile(userId: ID!, firstName: String, lastName: String, email: String, username: String, phone: String, avatar: String, gender: Gender, address: UserAddressInput, website: String, bio: String, company: String): UserProfileUpdateResponseOrError! @join__field(graph: USER)
  changePassword(oldPassword: String!, newPassword: String!): BaseResponseOrError! @join__field(graph: USER)
  forgetPassword(email: String!): BaseResponseOrError! @join__field(graph: USER)
  resetPassword(token: String!, newPassword: String!): BaseResponseOrError! @join__field(graph: USER)
  verifyEmail(userId: ID!, email: String!, sessionId: String!): EmailVerificationResponseOrError! @join__field(graph: USER)
  accountActivation(userId: ID!, email: String!): ActiveAccountResponseOrError! @join__field(graph: USER)
  logout: BaseResponseOrError! @join__field(graph: USER)
  deleteLoginSession(sessionIds: [String]!): BaseResponseOrError! @join__field(graph: USER)
  createUserRole(name: String!, description: String, defaultPermissions: [RolePermissionInput!], systemDeleteProtection: Boolean, systemUpdateProtection: Boolean): CreateRoleResponseOrError! @join__field(graph: USER)
  updateUserRole(roleAddIds: [String], roleRemoveIds: [String], userId: String!, password: String): BaseResponseOrError! @join__field(graph: USER)
  deleteUserRole(ids: [ID!]!, skipTrash: Boolean!, password: String): BaseResponseOrError! @join__field(graph: USER)
  restoreUserRole(ids: [ID!]!): BaseResponseOrError! @join__field(graph: USER)
  updateUserRoleInfo(id: ID!, name: String, description: String, defaultPermissions: [RolePermissionInput!], systemDeleteProtection: Boolean, systemUpdateProtection: Boolean, password: String): UpdateRoleResponseOrError! @join__field(graph: USER)
  updateUserPermission(input: UpdateUserPermissionInput!): BaseResponseOrError! @join__field(graph: USER)
  createAddressBookEntry(userId: ID!, company: String!, streetOne: String!, streetTwo: String!, city: String!, state: String!, zip: String!, country: String!, type: AddressType!, isDefault: Boolean!): CreateAddressBookResponseOrError! @join__field(graph: USER)
  updateAddressBookEntry(id: ID!, userId: ID!, company: String, streetOne: String, streetTwo: String, city: String, state: String, zip: String, country: String, type: AddressType, isDefault: Boolean): UpdateAddressBookResponseOrError! @join__field(graph: USER)
  deleteAddressBookEntry(id: ID!, userId: ID!): DeleteAddressesBookResponseOrError! @join__field(graph: USER)
  createTaxExemptionEntry(userId: String!, taxNumber: String!, assumptionReason: String!, taxCertificate: String!, expiryDate: String!): CreateTaxExemptionResponseOrError! @join__field(graph: USER)
  updateTaxExemptionEntry(id: ID!, userId: String!, taxNumber: String, assumptionReason: String, taxCertificate: String, expiryDate: String, status: TaxExemptionStatus): UpdateTaxExemptionResponseOrError! @join__field(graph: USER)
}

input PermissionAgainstRoleInput
  @join__type(graph: USER)
{
  name: String!
  description: String
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

enum PermissionName
  @join__type(graph: USER)
{
  USER @join__enumValue(graph: USER)
  BRAND @join__enumValue(graph: USER)
  CATEGORY @join__enumValue(graph: USER)
  PRODUCT @join__enumValue(graph: USER)
  PERMISSION @join__enumValue(graph: USER)
  PRODUCT_REVIEW @join__enumValue(graph: USER)
  SHIPPING_SETTINGS @join__enumValue(graph: USER)
  SUB_CATEGORY @join__enumValue(graph: USER)
  TAG @join__enumValue(graph: USER)
  TAX_SETTINGS @join__enumValue(graph: USER)
  FAQ @join__enumValue(graph: USER)
  NEWS_LETTER @join__enumValue(graph: USER)
  POP_UP_BANNER @join__enumValue(graph: USER)
  PRIVACY_POLICY @join__enumValue(graph: USER)
  TERMS_CONDITIONS @join__enumValue(graph: USER)
  ORDER @join__enumValue(graph: USER)
  ROLE @join__enumValue(graph: USER)
  NOTIFICATION @join__enumValue(graph: USER)
  MEDIA @join__enumValue(graph: USER)
  COUPON @join__enumValue(graph: USER)
  ADDRESS_BOOK @join__enumValue(graph: USER)
  TAX_EXEMPTION @join__enumValue(graph: USER)
}

type Permissions
  @join__type(graph: USER)
{
  id: ID!
  name: PermissionName!
  description: String!
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

type PermissionSession
  @join__type(graph: USER)
{
  id: ID!
  name: String!
  description: String
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

type PermissionsResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  permissions: [Permissions!]!
}

type PersonalizedWithRolePermissionResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  personalizedPermissions: [Permissions!]!
  rolePermissions: [Role!]
}

enum PricingTypeEnum
  @join__type(graph: PRODUCT)
{
  Fixed @join__enumValue(graph: PRODUCT)
  Percentage @join__enumValue(graph: PRODUCT)
}

type Product
  @join__type(graph: PRODUCT, key: "id")
{
  id: ID
  productConfigurationType: String
  productDeliveryType: [String!]!
  isCustomized: Boolean!
  name: String!
  slug: String!
  sku: String
  model: String
  createdBy: CreatedBy
  defaultImage: Media
  images: [Media!]
  videos: [Media!]
  defaultMainDescription: String!
  defaultShortDescription: String
  customBadge: String
  purchaseNote: String
  brands: [Brand!]
  tags: [Tag!]
  categories: [Category!]
  warrantyDigit: Int
  defaultWarrantyPeriod: String
  warrantyPolicy: String
  regularPrice: Float!
  salePrice: Float
  salePriceStartAt: String
  salePriceEndAt: String
  tierPricingInfo: ProductPrice
  saleQuantity: Int
  saleQuantityUnit: String
  taxStatus: String
  taxClass: TaxClass
  minQuantity: Int
  defaultQuantity: Int
  maxQuantity: Int
  quantityStep: Int
  manageStock: Boolean
  stockQuantity: Int
  allowBackOrders: String
  lowStockThresHold: Int
  stockStatus: String
  soldIndividually: Boolean
  initialNumberInStock: String
  weightUnit: String
  weight: Float
  dimensionUnit: String
  length: Float
  width: Float
  height: Float
  shippingClass: ShippingClass
  upsells: [Product!]
  crossSells: [Product!]
  attributes: [ProductAttribute]
  variations: [ProductVariation]
  reviews: [ProductReview!]
  enableReviews: Boolean
  isVisible: Boolean
  createdAt: String
  deletedAt: String
}

type ProductAttribute
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  slug: String!
  systemAttribute: Boolean!
  values: [ProductAttributeValue!]!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type ProductAttributePaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String
  attributes: [ProductAttribute!]!
  totalCount: Int!
}

type ProductAttributeResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String
  attribute: ProductAttribute
}

type ProductAttributeValue
  @join__type(graph: PRODUCT)
{
  id: ID!
  value: String!
  attribute: ProductAttribute!
  createdAt: String
  deletedAt: String
}

input ProductAttributeValueInput
  @join__type(graph: PRODUCT)
{
  value: String!
}

enum productConfigurationType
  @join__type(graph: PRODUCT)
{
  SIMPLE_PRODUCT @join__enumValue(graph: PRODUCT)
  VARIABLE_PRODUCT @join__enumValue(graph: PRODUCT)
}

enum ProductDeliveryType
  @join__type(graph: PRODUCT)
{
  PHYSICAL_PRODUCT @join__enumValue(graph: PRODUCT)
  DOWNLOADABLE_PRODUCT @join__enumValue(graph: PRODUCT)
  VIRTUAL_PRODUCT @join__enumValue(graph: PRODUCT)
}

type ProductPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  products: [Product!]!
  total: Int!
}

type ProductPrice
  @join__type(graph: PRODUCT)
{
  id: ID!
  pricingType: PricingTypeEnum!
  tieredPrices: [ProductTieredPrice!]!
  product: Product
  productVariation: ProductVariation
  createdAt: String
  deletedAt: String
}

input ProductPriceInput
  @join__type(graph: PRODUCT)
{
  pricingType: PricingTypeEnum!
  tieredPrices: [ProductTieredPriceInput!]
  productVariationId: ID
}

type ProductResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  product: Product!
}

type ProductReview
  @join__type(graph: PRODUCT)
{
  id: ID!
  comment: String!
  rating: Int!
  isApproved: Boolean!
  reviewedBy: String!
  guestName: String
  guestEmail: String
  product: Product!
  createdAt: String
  deletedAt: String
}

input ProductReviewInput
  @join__type(graph: PRODUCT)
{
  id: ID
  comment: String!
  rating: Int!
  isApproved: Boolean
  reviewedBy: String!
  guestName: String
  guestEmail: String
  productId: ID!
  deletedAt: String
}

type ProductReviewPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  reviews: [ProductReview!]!
  total: Int!
}

type ProductReviewResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  reviews: ProductReview!
}

type ProductTieredPrice
  @join__type(graph: PRODUCT)
{
  id: ID!
  minQuantity: Int!
  maxQuantity: Int!
  fixedPrice: Float
  percentageDiscount: Float
  quantityUnit: String!
  productPrice: ProductPrice
  createdAt: String
  deletedAt: String
}

input ProductTieredPriceInput
  @join__type(graph: PRODUCT)
{
  minQuantity: Int!
  maxQuantity: Int!
  fixedPrice: Float
  percentageDiscount: Float
}

type ProductVariation
  @join__type(graph: PRODUCT)
{
  id: ID!
  sku: String
  productDeliveryType: [String!]!
  brands: [Brand!]
  minQuantity: Int
  defaultQuantity: Int
  maxQuantity: Int
  quantityStep: Int!
  regularPrice: Float!
  salePrice: Float
  salePriceStartAt: String
  salePriceEndAt: String
  tierPricingInfo: ProductPrice
  stockStatus: String
  weightUnit: String
  weight: Float
  dimensionUnit: String
  length: Float
  width: Float
  height: Float
  product: Product!
  attributeValues: [ProductAttributeValue!]!
  warrantyDigit: Int
  defaultWarrantyPeriod: String
  warrantyPolicy: String
  shippingClass: ShippingClass
  taxStatus: String
  taxClass: TaxClass
  description: String
  images: [Media!]
  videos: [Media!]
  createdAt: String
  deletedAt: String
}

input ProductVariationInput
  @join__type(graph: PRODUCT)
{
  id: ID
  sku: String
  productDeliveryType: [ProductDeliveryType!]
  brandIds: [ID!]
  minQuantity: Int
  defaultQuantity: Int
  maxQuantity: Int
  quantityStep: Int
  regularPrice: Float!
  salePrice: Float
  salePriceStartAt: String
  salePriceEndAt: String
  tierPricingInfo: ProductPriceInput
  stockStatus: String
  weightUnit: WeightUnit
  weight: Float
  dimensionUnit: String
  length: Float
  width: Float
  height: Float
  attributeValues: [ID!]
  warrantyDigit: Int
  defaultWarrantyPeriod: DefaultWarrantyPeriod
  warrantyPolicy: String
  shippingClassId: ID
  taxStatus: TaxStatus
  taxClassId: ID!
  description: String
  images: [ID!]
  videos: [ID!]
}

type Query
  @join__type(graph: MEDIA)
  @join__type(graph: PRODUCT)
  @join__type(graph: USER)
{
  getMediaById(id: ID!): GetMediaByIdResponseOrError! @join__field(graph: MEDIA)
  getAllMedias(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetMediasResponseOrError! @join__field(graph: MEDIA)
  getBrandById(id: ID!): GetBrandByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllBrands(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetBrandsResponseOrError! @join__field(graph: PRODUCT)
  getTagById(id: ID!): GetTagByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllTags(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetTagsResponseOrError! @join__field(graph: PRODUCT)
  getCategoryById(id: ID!): GetCategoryByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllCategories(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetCategoriesResponseOrError! @join__field(graph: PRODUCT)
  getShippingClassById(id: ID!): GetShippingClassByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllShippingClass(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetShippingClassesResponseOrError! @join__field(graph: PRODUCT)
  getTaxClassById(id: ID!): GetTaxClassByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllTaxClass(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetTaxClassesResponseOrError! @join__field(graph: PRODUCT)
  getTaxRateById(id: ID!): GetTaxRateByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllTaxRates(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String, taxClassId: ID!): GetTaxRatesResponseOrError! @join__field(graph: PRODUCT)
  getProductAttributeById(id: ID!): GetProductAttributeByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllProductAttribute(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetAllProductAttributesResponseOrError! @join__field(graph: PRODUCT)
  getReview: String @join__field(graph: PRODUCT)
  getProduct(id: ID!): GetProductByIdResponseOrError! @join__field(graph: PRODUCT)
  getAllProducts(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetProductsResponseOrError! @join__field(graph: PRODUCT)
  getShippingZoneById(id: ID!): GetShippingZoneByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllShippingZones(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetShippingZonesResponseOrError! @join__field(graph: PRODUCT)
  getShippingMethodById(id: ID!): GetShippingMethodByIDResponseOrError! @join__field(graph: PRODUCT)
  getAllShippingMethods(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetShippingMethodsResponseOrError! @join__field(graph: PRODUCT)
  getTaxOptions: GetTaxOptionsResponseOrError! @join__field(graph: PRODUCT)
  getProfile: GetProfileResponseOrError! @join__field(graph: USER)
  getUserById(id: String!): GetUserByIDResponseOrError! @join__field(graph: USER)
  getAllUsers(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetUsersResponseOrError! @join__field(graph: USER)
  getUserOwnLoginInfo: GetUserLoginInfoResponseOrError! @join__field(graph: USER)
  getRoleById(id: String!): GetRoleByIDResponseOrError! @join__field(graph: USER)
  getAllRoles(page: Int!, limit: Int!, search: String, sortBy: String, sortOrder: String): GetRolesResponseOrError! @join__field(graph: USER)
  getAllPermissionsByUserId(id: ID!): GetPermissionsResponseOrError! @join__field(graph: USER)
  getOwnPersonalizedPermissions: GetPermissionsResponseOrError! @join__field(graph: USER)
  getAddressBookEntryById(id: ID!, userId: ID!): GetAddressBookByIdResponseOrError! @join__field(graph: USER)
  getAddressEntires(type: AddressType!, userId: ID!): GetAddressesBookResponseOrError! @join__field(graph: USER)
  getTaxExemptionEntryByUserId(userId: ID!): GetTaxExemptionsResponseOrError! @join__field(graph: USER)
}

union RestoreBrandResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreCategoryResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreProductAttributeResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreProductResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreProductReviewResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreShippingClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreShippingZoneResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreTagResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreTaxClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union RestoreTaxRateResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

type Role
  @join__type(graph: USER)
{
  id: ID!
  name: String!
  description: String
  defaultPermissions: [RolePermissionSession!]
  systemDeleteProtection: Boolean
  systemUpdateProtection: Boolean
  assignedUserCount: Int
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

input RolePermissionInput
  @join__type(graph: USER)
{
  name: PermissionName!
  description: String
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

type RolePermissionSession
  @join__type(graph: USER)
{
  id: ID!
  name: String!
  description: String
  canCreate: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canDelete: Boolean!
}

type RoleResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  role: Role
}

type RoleSession
  @join__type(graph: USER)
{
  id: ID!
  name: String!
  description: String!
  defaultPermissions: [RolePermissionSession!]!
  systemDeleteProtection: Boolean!
  systemUpdateProtection: Boolean!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type RolesResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  roles: [Role!]!
  total: Int!
}

type ShippingClass
  @join__type(graph: PRODUCT)
{
  id: ID!
  value: String!
  description: String
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type ShippingClassPaginationDataSession
  @join__type(graph: PRODUCT)
{
  id: ID!
  value: String!
  description: String
  totalProducts: Int
  createdBy: CreatedBy!
  createdAt: String
  deletedAt: String
}

type ShippingClassPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  shippingClasses: [ShippingClassPaginationDataSession!]!
  total: Int!
}

type ShippingClassResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  shippingClass: ShippingClass!
}

type ShippingMethod
  @join__type(graph: PRODUCT)
{
  id: ID!
  title: String!
  status: Boolean!
  description: String
  flatRate: FlatRate
  freeShipping: FreeShipping
  localPickUp: LocalPickUp
  ups: Ups
  shippingZone: ShippingZone
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type ShippingMethodPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  shippingMethods: [ShippingMethod!]!
  total: Int!
}

type ShippingMethodResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  shippingMethod: ShippingMethod!
}

type ShippingZone
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  regions: [String!]!
  zipCodes: [String]
  shippingMethods: [ShippingMethod]
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type ShippingZonePaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  shippingZones: [ShippingZone!]!
  total: Int!
}

type ShippingZoneResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  shippingZone: ShippingZone!
}

input SinglePermissionInput
  @join__type(graph: USER)
{
  name: PermissionName!
  canCreate: Boolean
  canRead: Boolean
  canUpdate: Boolean
  canDelete: Boolean
  description: String
}

enum StockStatus
  @join__type(graph: PRODUCT)
{
  IN_STOCK @join__enumValue(graph: PRODUCT)
  OUT_OF_STOCK @join__enumValue(graph: PRODUCT)
  ON_BACKORDER @join__enumValue(graph: PRODUCT)
}

type Tag
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  slug: String!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type TagPaginationDataSession
  @join__type(graph: PRODUCT)
{
  id: ID!
  name: String!
  slug: String!
  totalProducts: Int
  createdBy: CreatedBy!
  createdAt: String
  deletedAt: String
}

type TagPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  tags: [TagPaginationDataSession!]!
  total: Int!
}

type TagResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  tag: Tag!
}

type TaxClass
  @join__type(graph: PRODUCT)
{
  id: ID!
  value: String!
  description: String
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type TaxClassPaginationDataSession
  @join__type(graph: PRODUCT)
{
  id: ID!
  value: String!
  description: String
  totalProducts: Int
  createdBy: CreatedBy!
  createdAt: String
  deletedAt: String
}

type TaxClassPaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  taxClasses: [TaxClassPaginationDataSession!]!
  total: Int!
}

type TaxClassResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  taxClass: TaxClass!
}

type TaxExemption
  @join__type(graph: USER)
{
  id: ID!
  taxNumber: String!
  assumptionReason: String!
  taxCertificate: Media
  status: TaxExemptionStatus!
  expiryDate: String!
  createdAt: String!
  updatedAt: String!
}

type TaxExemptionResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  taxExemption: TaxExemption!
}

enum TaxExemptionStatus
  @join__type(graph: USER)
{
  Pending @join__enumValue(graph: USER)
  Approved @join__enumValue(graph: USER)
  Rejected @join__enumValue(graph: USER)
  Expired @join__enumValue(graph: USER)
}

type TaxOptions
  @join__type(graph: PRODUCT)
{
  id: ID!
  pricesEnteredWithTax: Boolean!
  calculateTaxBasedOn: String!
  shippingTaxClass: ShippingClass!
  displayPricesInShop: Boolean!
  displayPricesDuringCartAndCheckout: Boolean!
  priceDisplaySuffix: String!
  displayTaxTotals: String!
  roundTaxAtSubtotalLevel: Boolean!
  createdBy: CreatedBy
  createdAt: String
  updatedAt: String
}

type TaxOptionsResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  taxOptions: TaxOptions!
}

type TaxRate
  @join__type(graph: PRODUCT)
{
  id: ID!
  country: String
  state: String
  city: String
  postcode: String
  rate: Float
  label: String
  appliesToShipping: Boolean
  isCompound: Boolean
  priority: Int
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

type TaxRatePaginationResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  taxRates: [TaxRate!]!
  total: Int!
}

type TaxRateResponse
  @join__type(graph: PRODUCT)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  taxRate: TaxRateSession!
}

type TaxRateSession
  @join__type(graph: PRODUCT)
{
  id: ID!
  country: String!
  state: String
  city: String
  postcode: String
  rate: Float!
  label: String!
  taxClassId: ID!
  appliesToShipping: Boolean!
  isCompound: Boolean!
  priority: Int!
  createdBy: CreatedBy!
  createdAt: String
  deletedAt: String
}

enum TaxStatus
  @join__type(graph: PRODUCT)
{
  TAXABLE @join__enumValue(graph: PRODUCT)
  PRODUCT_ONLY @join__enumValue(graph: PRODUCT)
  SHIPPING_ONLY @join__enumValue(graph: PRODUCT)
  NONE @join__enumValue(graph: PRODUCT)
}

union UpdateAddressBookResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "AddressResponseBook")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | AddressResponseBook | ErrorResponse

union UpdateBrandResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "BrandResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | BrandResponse | ErrorResponse

union UpdateCategoryResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "CategoryResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | CategoryResponse | ErrorResponse

input UpdateMediaInput
  @join__type(graph: MEDIA)
{
  id: ID!
  title: String
  description: String
  altText: String
  dimension: MediaDimensionInput
  length: Int
  category: MediaCategory!
}

union UpdateMediaResponseOrError
  @join__type(graph: MEDIA)
  @join__unionMember(graph: MEDIA, member: "BaseResponse")
  @join__unionMember(graph: MEDIA, member: "MediaResponse")
  @join__unionMember(graph: MEDIA, member: "ErrorResponse")
 = BaseResponse | MediaResponse | ErrorResponse

union UpdateProductAttributeResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductAttributeResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductAttributeResponse | ErrorResponse

union UpdateProductResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ErrorResponse

union UpdateProductReviewResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ProductReviewResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ProductReviewResponse | ErrorResponse

union UpdateRoleResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "RoleResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | RoleResponse | ErrorResponse

union UpdateShippingClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingClassResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingClassResponse | ErrorResponse

union UpdateShippingMethodResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingMethodResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingMethodResponse | ErrorResponse

union UpdateShippingZoneResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "ShippingZoneResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | ShippingZoneResponse | ErrorResponse

union UpdateTagResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TagResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TagResponse | ErrorResponse

union UpdateTaxClassResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxClassResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxClassResponse | ErrorResponse

union UpdateTaxExemptionResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "TaxExemptionResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | TaxExemptionResponse | ErrorResponse

union UpdateTaxOptionsResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxOptionsResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxOptionsResponse | ErrorResponse

union UpdateTaxRateResponseOrError
  @join__type(graph: PRODUCT)
  @join__unionMember(graph: PRODUCT, member: "BaseResponse")
  @join__unionMember(graph: PRODUCT, member: "TaxRateResponse")
  @join__unionMember(graph: PRODUCT, member: "ErrorResponse")
 = BaseResponse | TaxRateResponse | ErrorResponse

input UpdateUserPermissionInput
  @join__type(graph: USER)
{
  userId: ID!
  accessAll: Boolean
  deniedAll: Boolean
  permissions: [SinglePermissionInput!]
  password: String
}

input UploadMediaInput
  @join__type(graph: MEDIA)
{
  mediaType: MediaMimeType!
  fileName: String!
  originalFileName: String!
  title: String
  description: String
  altText: String
  dimension: MediaDimensionInput
  length: Int
  category: MediaCategory
  size: Int!
  url: String!
  bucketName: String!
}

type UploadMediaResponse
  @join__type(graph: MEDIA)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  medias: [Media!]!
}

union UploadMediaResponseOrError
  @join__type(graph: MEDIA)
  @join__unionMember(graph: MEDIA, member: "BaseResponse")
  @join__unionMember(graph: MEDIA, member: "UploadMediaResponse")
  @join__unionMember(graph: MEDIA, member: "ErrorResponse")
 = BaseResponse | UploadMediaResponse | ErrorResponse

type Ups
  @join__type(graph: PRODUCT)
{
  id: ID!
  title: String!
  createdBy: CreatedBy
  createdAt: String
  deletedAt: String
}

input UpsInput
  @join__type(graph: PRODUCT)
{
  id: ID
  title: String!
}

type User
  @join__type(graph: USER, key: "id")
{
  id: ID!
  avatar: Media
  firstName: String
  lastName: String
  email: String
  tempUpdatedEmail: String
  username: String
  website: String
  company: String
  bio: String
  address: UserAddress
  emailVerified: Boolean
  gender: String
  phone: String
  roles: [UserRoleObject!]!
  isAccountActivated: Boolean
  permissions: [PermissionSession!]!
  canUpdatePermissions: Boolean
  canUpdateRole: Boolean
  createdAt: String
  deletedAt: String
}

type UserAddress
  @join__type(graph: USER)
{
  street: String
  city: String
  state: String
  zip: String
  country: String
}

input UserAddressInput
  @join__type(graph: USER)
{
  street: String
  city: String
  state: String
  zip: String
  country: String
}

type UserLoginInfoResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  userLoginInfo: [LoginMeta!]!
}

type UserLoginResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String!
  sessionId: String!
}

union UserLoginResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "UserLoginResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | UserLoginResponse | ErrorResponse

type UserProfileUpdateResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  token: String
}

union UserProfileUpdateResponseOrError
  @join__type(graph: USER)
  @join__unionMember(graph: USER, member: "BaseResponse")
  @join__unionMember(graph: USER, member: "UserProfileUpdateResponse")
  @join__unionMember(graph: USER, member: "ErrorResponse")
 = BaseResponse | UserProfileUpdateResponse | ErrorResponse

type UserResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  user: User!
}

type UserRoleObject
  @join__type(graph: USER)
{
  id: ID!
  name: String!
  defaultPermissions: [RolePermissionSession!]!
}

type UserSession
  @join__type(graph: USER)
{
  id: ID!
  avatar: ID
  firstName: String!
  lastName: String!
  email: String!
  gender: String!
  roles: [UserSessionRoleObject!]!
  emailVerified: Boolean!
  isAccountActivated: Boolean!
  sessionId: String!
}

type UserSessionByEmail
  @join__type(graph: USER)
{
  id: ID!
  avatar: ID
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  address: UserAddress
  username: String!
  password: String!
  emailVerified: Boolean!
  gender: String!
  website: String!
  company: String!
  bio: String!
  roles: [UserRoleObject!]!
  permissions: [PermissionSession!]!
  canUpdatePermissions: Boolean!
  canUpdateRole: Boolean!
  isAccountActivated: Boolean!
  tempUpdatedEmail: String!
  tempEmailVerified: Boolean!
  createdAt: String
  deletedAt: String
}

type UserSessionById
  @join__type(graph: USER)
{
  id: ID!
  avatar: ID
  firstName: String!
  lastName: String!
  email: String!
  address: UserAddress
  username: String!
  emailVerified: Boolean!
  gender: String!
  phone: String!
  website: String!
  company: String!
  bio: String!
  roles: [UserRoleObject!]!
  permissions: [PermissionSession!]!
  canUpdatePermissions: Boolean!
  canUpdateRole: Boolean!
  isAccountActivated: Boolean!
  tempUpdatedEmail: String!
  tempEmailVerified: Boolean!
  createdAt: String
  deletedAt: String
}

type UserSessionRoleObject
  @join__type(graph: USER)
{
  id: ID!
  name: String!
}

type UsersResponse
  @join__type(graph: USER)
{
  statusCode: Int!
  success: Boolean!
  message: String!
  users: [User!]!
  total: Int!
}

enum WeightUnit
  @join__type(graph: PRODUCT)
{
  MILLIGRAM @join__enumValue(graph: PRODUCT)
  GRAM @join__enumValue(graph: PRODUCT)
  KILOGRAM @join__enumValue(graph: PRODUCT)
  TON @join__enumValue(graph: PRODUCT)
  POUND @join__enumValue(graph: PRODUCT)
  OUNCE @join__enumValue(graph: PRODUCT)
  STONE @join__enumValue(graph: PRODUCT)
  CARAT @join__enumValue(graph: PRODUCT)
  GRAIN @join__enumValue(graph: PRODUCT)
  QUINTAL @join__enumValue(graph: PRODUCT)
  METRIC_TON @join__enumValue(graph: PRODUCT)
}
