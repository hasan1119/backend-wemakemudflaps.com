# ---------------------- Apollo Federation Link ----------------------

# Importing Apollo Federation specification directives for composing multiple services into a single graph.
extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@shareable", "@external"]
  )

# ---------------------- Basic Types ----------------------

# Enum defining all possible media categories in the system.
enum MediaCategory {
  Avatar
  Product
  Product_Review
  Product_Return
  Order
  Complain
  Banner
  Site_Logo
  Site_Favicon
  Carousel
  Category
  Sub_Category
  Brand
  Promotion
  Invoice
  Shipping_Label
  Site_Settings
}

# Enum defining supported media MIME types for validation and categorization.
enum MediaMimeType {
  image_jpeg
  image_png
  image_gif
  image_bmp
  image_webp
  image_svg_xml
  image_tiff
  image_x_icon
  image_heic
  image_heif
  image_jp2
  image_jpx
  image_jpm
  image_avif
  image_x_portable_anymap
  image_x_portable_bitmap
  image_x_portable_graymap
  image_x_portable_pixmap
  image_x_rgb
  image_x_xbitmap
  image_x_xpixmap
  image_x_xwindowdump
  video_mp4
  video_mpeg
  video_ogg
  video_webm
  video_x_msvideo
  video_x_flv
  video_x_m4v
  video_x_ms_wmv
  video_x_ms_asf
  video_x_matroska
  video_quicktime
  video_3gpp
  video_3gpp2
  video_h261
  video_h263
  video_h264
  video_jpeg
  video_jpm
  video_mj2
  video_mp2t
  video_x_f4v
  video_x_fli
  video_x_mng
  video_x_smv
  application_pdf
  application_msword
  application_vnd_ms_excel
  application_vnd_ms_powerpoint
  application_vnd_openxmlformats_officedocument_wordprocessingml_document
  application_vnd_openxmlformats_officedocument_spreadsheetml_sheet
  application_vnd_openxmlformats_officedocument_presentationml_presentation
  application_vnd_oasis_opendocument_text
  application_vnd_oasis_opendocument_spreadsheet
  application_vnd_oasis_opendocument_presentation
  application_vnd_oasis_opendocument_graphics
  application_vnd_oasis_opendocument_chart
  application_vnd_oasis_opendocument_formula
  application_vnd_oasis_opendocument_image
  application_rtf
  application_x_abiword
  application_vnd_lotus_1_2_3
  application_vnd_lotus_approach
  application_vnd_lotus_freelance
  application_vnd_lotus_organizer
  application_vnd_lotus_screencam
  application_vnd_lotus_wordpro
  application_vnd_visio
}

# Represents an error related to a specific field in input validation or business logic.
type FieldError @shareable {
  field: String! # The specific field that caused the error (e.g., "title", "url").
  message: String! # Descriptive message explaining the reason for the error.
}

# Generic error response type returned when a mutation or query fails.
type ErrorResponse @shareable {
  statusCode: Int! # HTTP-like status code (e.g., 400, 401, 500).
  success: Boolean! # Whether the operation was successful (always false here).
  message: String! # General error message.
  errors: [FieldError!] # Optional list of field-specific errors.
}

# Standard response structure used when only status and message are returned (e.g., success/failure).
type BaseResponse @shareable {
  statusCode: Int!
  success: Boolean!
  message: String!
}

# ---------------------- CreatedBy ----------------------

# Extends the CreatedBy entity to support federated references.
extend type CreatedBy @key(fields: "id") {
  id: ID! @external
}

# ---------------------- Media Types ----------------------

# Represents the dimensions of a media item, such as width, height, and unit (e.g., "px").
type MediaDimension {
  width: Int! # Width of the media in pixels.
  height: Int! # Height of the media in pixels.
  unit: String! # Unit of measurement (e.g., "px").
}

# Represents a media file stored in the system.
type Media @key(fields: "id") @shareable {
  id: ID! # Unique identifier for the media item.
  mediaType: String # MIME type of the media (e.g., "image/jpeg").
  url: String # URL where the media is accessible.
  fileName: String # Original name of the uploaded file.
  title: String # Optional title for the media.
  description: String # Optional description of the media.
  altText: String # Alternative text for accessibility.
  dimension: MediaDimension # Dimensions of the media (e.g., "1920x1080").
  length: Int # Duration in seconds for video/audio files.
  category: String # Category under which the media is classified.
  size: Int # Size of the media file in bytes.
  bucketName: String # Name of the storage bucket where media is stored.
  createdBy: CreatedBy! # Metadata on who uploaded the media.
  createdAt: String # Timestamp when the media was created.
  deletedAt: String # Timestamp when the media was deleted, if applicable.
}

# Response returned when fetching a single media item.
type MediaResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  media: Media!
}

# Response returned when uploading multiple media items.
type UploadMediaResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  medias: [Media!]!
}

# Response returned when fetching multiple media items.
type MediasResponse {
  statusCode: Int!
  success: Boolean!
  message: String!
  medias: [Media!]!
  total: Int! # Total number of media items matching the query.
}

# ---------------------- Inputs ----------------------

# Input version of MediaDimension, used in mutations.
input MediaDimensionInput {
  width: Int! # Width of the media in pixels.
  height: Int! # Height of the media in pixels.
  unit: String! # Unit of measurement (e.g., "px").
}

# Input type for uploading a new media item.
input UploadMediaInput {
  mediaType: MediaMimeType! # MIME type of the media.
  fileName: String! # Original name of the uploaded file.
  originalFileName: String! # Original name of the uploaded file.
  title: String # Optional title for the media.
  description: String # Optional description of the media.
  altText: String # Alternative text for accessibility.
  dimension: MediaDimensionInput # Dimensions of the media.
  length: Int # Duration in seconds for video/audio files.
  category: MediaCategory # Category under which the media is classified.
  size: Int! # Size of the media file in bytes.
  url: String! # URL where the media is accessible.
  bucketName: String! # Name of the storage bucket where media is stored.
}

# Input type for updating an existing media item.
input UpdateMediaInput {
  id: ID! # Unique identifier for the media item.
  title: String # Optional new title for the media.
  description: String # Optional new description of the media.
  altText: String # Optional new alternative text for accessibility.
  dimension: MediaDimensionInput # Optional new dimensions of the media.
  length: Int # Optional new duration in seconds for video/audio files.
  category: MediaCategory! # New category under which the media is classified.
}

# ---------------------- Unions ----------------------

# Union type for responses that can be either a base response or an error response.
union BaseResponseOrError = BaseResponse | ErrorResponse

# Union type for responses when fetching a single media item.
union GetMediaByIdResponseOrError = BaseResponse | MediaResponse | ErrorResponse

# Union type for responses when fetching multiple media items.
union GetMediasResponseOrError = BaseResponse | MediasResponse | ErrorResponse

# Union type for responses when uploading media items.
union UploadMediaResponseOrError =
    BaseResponse
  | UploadMediaResponse
  | ErrorResponse

# Union type for responses when updating a single media info.
union UpdateMediaResponseOrError = BaseResponse | MediaResponse | ErrorResponse
