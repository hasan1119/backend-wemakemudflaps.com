# Mutations to modify user data.
type Mutation {
  # Upload media files for a user.
  # This mutation allows an authenticated user to upload multiple media files by providing an array of media details.
  # The user must be identified by their unique `userId`, which must match the authenticated user's ID.
  # The response will include a `BaseResponseOrError` indicating the success or failure of the operation.
  uploadMediaFiles(
    inputs: [UploadMediaInput]! # Array of media details, including mediaType, fileName, url, category, size, bucketName, and userId.
    userId: String! # The unique ID of the authorized user, must match the authenticated user's ID.
  ): BaseResponseOrError! # Returns success or error response with status.
  # Update media files' information.
  # This mutation allows an authenticated user to update specific fields (title, description, altText, dimension, length, category) of one media file by providing unique ID and updated values.
  # The response will include a `BaseResponseOrError` indicating the success or failure of the operation.
  updateMediaFileInfo(
    inputs: UpdateMediaInput! # Object containing media ID and fields to update (title, description, altText, dimension, length, category).
  ): BaseResponseOrError! # Returns success or error response with status.
  # Delete media files by their IDs.
  # This mutation allows an authenticated user to delete one or more media files by providing their unique IDs.
  # The response will include a `BaseResponseOrError` indicating the success or failure of the operation.
  deleteMediaFiles(
    ids: [ID!]! # Array of unique IDs of the media files to be deleted.
  ): BaseResponseOrError! # Returns success or error response with status.
}
