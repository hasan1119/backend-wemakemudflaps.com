# Mutations to manage media file operations.
type Mutation {
  # Upload one or more media files.
  # Accepts an array of media file input objects, including metadata and file info.
  # Each file is stored securely and linked to the specified user.
  # Returns a status indicating success or failure of the upload.
  uploadMediaFiles(
    inputs: [UploadMediaInput]! # List of media files and associated metadata.
    userId: String! # ID of the user who is uploading the files.
  ): UploadMediaResponseOrError!

  # Upload media file for avatar.
  # Accepts an obj of media file input, including metadata and file info.
  # Each file is stored securely and linked to the specified user.
  # Returns a status indicating success or failure of the upload.
  uploadAvatar(
    inputs: UploadAvatarInput! # List of media files and associated metadata.
  ): UploadMediaResponseOrError!

  # Update information of an existing media file.
  # Allows changing metadata like name, description, tags, or other fields.
  # The file itself is not re-uploaded â€” only metadata is updated.
  updateMediaFileInfo(
    inputs: UpdateMediaInput! # Input object with updated media file details.
  ): UpdateMediaResponseOrError!

  # Delete one or more media files.
  # If `skipTrash` is false, files are soft-deleted and can be restored later.
  # If `skipTrash` is true, files are permanently deleted unless protected.
  # Password may be required for non-super admins.
  deleteMediaFiles(
    ids: [ID!]! # List of media file IDs to delete.
    skipTrash: Boolean! # If true, deletes permanently instead of soft-deleting.
    password: String # Optional password confirmation for non-super admins.
  ): BaseResponseOrError!

  # Restore previously soft-deleted media files.
  # Only restores files that were not permanently deleted.
  # Returns a status indicating success or failure of restoration.
  restoreMediaFiles(
    ids: [ID!]! # List of media file IDs to be restored.
  ): BaseResponseOrError!
}
