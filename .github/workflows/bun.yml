name: Apollo Federation CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch:

# Prevent concurrent deployments of the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  HEALTH_CHECK_RETRIES: 12
  HEALTH_CHECK_INTERVAL: 5 # seconds
  # Common environment variables from secrets
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  DB_TYPE: ${{ secrets.DB_TYPE }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_SYNCHRONIZE: ${{ secrets.DB_SYNCHRONIZE }}
  DB_ENTITIES: ${{ secrets.DB_ENTITIES }}
  DB_MIGRATIONS: ${{ secrets.DB_MIGRATIONS }}
  SALT_ROUNDS: ${{ secrets.SALT_ROUNDS }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  EXPIRE: ${{ secrets.EXPIRE }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  REDIS_SESSION_TTL: ${{ secrets.REDIS_SESSION_TTL }}
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_USER: ${{ secrets.EMAIL_USER }}
  EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  NODE_ENV: ${{ secrets.NODE_ENV }}

jobs:
  deploy-users:
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
        working-directory: ./users

      - name: Deploy Users Subgraph
        env:
          PORT: 4001
          PM2_NAME: sunshine_users_subgraph
        run: |
          if pm2 list | grep -q "$PM2_NAME"; then
            echo "Reloading $PM2_NAME for zero-downtime deployment."
            pm2 reload $PM2_NAME
          else
            echo "Starting $PM2_NAME for the first time."
            pm2 start bun --name $PM2_NAME -- start
          fi
          sleep 5
        working-directory: ./users

      - name: Verify Service Health
        env:
          PORT: 4001
          PM2_NAME: sunshine_users_subgraph
        run: |
          ENDPOINT="http://localhost:$PORT/health"
          RETRY_COUNTER=0
          echo "Verifying users subgraph health at $ENDPOINT"
          until curl -s -f "$ENDPOINT" > /dev/null || [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; do
            echo "Health check attempt $RETRY_COUNTER failed, retrying in ${{ env.HEALTH_CHECK_INTERVAL }} seconds..."
            RETRY_COUNTER=$((RETRY_COUNTER+1))
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
          done
          if [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; then
            echo "::error::Service users failed to start/reload properly!"
            pm2 logs $PM2_NAME --lines 50
            exit 1
          else
            echo "Service users is healthy and operational!"
          fi

  deploy-media:
    runs-on: self-hosted
    needs: deploy-users
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
        working-directory: ./media

      - name: Deploy Media Subgraph
        env:
          PORT: 4002
          PM2_NAME: sunshine_media_subgraph
        run: |
          if pm2 list | grep -q "$PM2_NAME"; then
            echo "Reloading $PM2_NAME for zero-downtime deployment."
            pm2 reload $PM2_NAME
          else
            echo "Starting $PM2_NAME for the first time."
            pm2 start bun --name $PM2_NAME -- start
          fi
          sleep 5
        working-directory: ./media

      - name: Verify Service Health
        env:
          PORT: 4002
          PM2_NAME: sunshine_media_subgraph
        run: |
          ENDPOINT="http://localhost:$PORT/health"
          RETRY_COUNTER=0
          echo "Verifying media subgraph health at $ENDPOINT"
          until curl -s -f "$ENDPOINT" > /dev/null || [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; do
            echo "Health check attempt $RETRY_COUNTER failed, retrying in ${{ env.HEALTH_CHECK_INTERVAL }} seconds..."
            RETRY_COUNTER=$((RETRY_COUNTER+1))
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
          done
          if [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; then
            echo "::error::Service media failed to start/reload properly!"
            pm2 logs $PM2_NAME --lines 50
            exit 1
          else
            echo "Service media is healthy and operational!"
          fi

  deploy-product:
    runs-on: self-hosted
    needs: deploy-media
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
        working-directory: ./product

      - name: Deploy Product Subgraph
        env:
          PORT: 4003
          PM2_NAME: sunshine_product_subgraph
        run: |
          if pm2 list | grep -q "$PM2_NAME"; then
            echo "Reloading $PM2_NAME for zero-downtime deployment."
            pm2 reload $PM2_NAME
          else
            echo "Starting $PM2_NAME for the first time."
            pm2 start bun --name $PM2_NAME -- start
          fi
          sleep 5
        working-directory: ./product

      - name: Verify Service Health
        env:
          PORT: 4003
          PM2_NAME: sunshine_product_subgraph
        run: |
          ENDPOINT="http://localhost:$PORT/health"
          RETRY_COUNTER=0
          echo "Verifying product subgraph health at $ENDPOINT"
          until curl -s -f "$ENDPOINT" > /dev/null || [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; do
            echo "Health check attempt $RETRY_COUNTER failed, retrying in ${{ env.HEALTH_CHECK_INTERVAL }} seconds..."
            RETRY_COUNTER=$((RETRY_COUNTER+1))
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
          done
          if [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; then
            echo "::error::Service product failed to start/reload properly!"
            pm2 logs $PM2_NAME --lines 50
            exit 1
          else
            echo "Service product is healthy and operational!"
          fi

  deploy-router:
    runs-on: self-hosted
    needs: deploy-product
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify all subgraphs are healthy
        run: |
          echo "Verifying all subgraphs are healthy before updating the router..."
          if ! curl -s -f "http://localhost:4001/health"; then echo "::error::Users subgraph is not healthy!"; exit 1; else echo "Users subgraph is healthy"; fi
          if ! curl -s -f "http://localhost:4002/health"; then echo "::error::Media subgraph is not healthy!"; exit 1; else echo "Media subgraph is healthy"; fi
          if ! curl -s -f "http://localhost:4003/health"; then echo "::error::Product subgraph is not healthy!"; exit 1; else echo "Product subgraph is healthy"; fi
          echo "All subgraphs are operational, safe to update router!"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: router/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./router

      - name: Deploy Router
        env:
          PM2_NAME: sunshine_router
        run: |
          if pm2 list | grep -q "$PM2_NAME"; then
            echo "Reloading $PM2_NAME for zero-downtime deployment."
            pm2 reload $PM2_NAME
          else
            echo "Starting $PM2_NAME for the first time."
            pm2 start npm --name $PM2_NAME -- start
          fi
          sleep 5
        working-directory: ./router

      - name: Verify Router Health
        env:
          ROUTER_PORT: 4000
          PM2_NAME: sunshine_router
        run: |
          ENDPOINT="http://localhost:$ROUTER_PORT/.well-known/apollo/server-health"
          RETRY_COUNTER=0
          echo "Verifying Router health at $ENDPOINT"
          until curl -s -f "$ENDPOINT" > /dev/null || [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; do
            echo "Health check attempt $RETRY_COUNTER failed, retrying in ${{ env.HEALTH_CHECK_INTERVAL }} seconds..."
            RETRY_COUNTER=$((RETRY_COUNTER+1))
            sleep ${{ env.HEALTH_CHECK_INTERVAL }}
          done
          if [ $RETRY_COUNTER -eq ${{ env.HEALTH_CHECK_RETRIES }} ]; then
            echo "::error::Apollo Router failed to start properly!"
            pm2 logs $PM2_NAME --lines 50
            exit 1
          else
            echo "Apollo Router is healthy and operational!"
          fi
